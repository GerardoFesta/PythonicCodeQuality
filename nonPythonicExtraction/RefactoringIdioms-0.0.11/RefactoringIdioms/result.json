[{"file_path": "/home/gerardo/Scrivania/flambe/flambe/export/builder.py", "cl": "Builder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.destination = destination", "self.component = component"], "simple_code": ["self.destination , self.component  = destination, component", ""], "lineno": [[[73, 8], [73, 38]], [[74, 8], [74, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/export/builder.py", "cl": "Builder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.storage = storage", "self.serialization_args = {\n            'compress': compress,\n            'pickle_only': pickle_only,\n            'pickle_module': pickle_module,\n            'pickle_protocol': pickle_protocol\n        }"], "simple_code": ["self.storage , self.serialization_args  = storage, {'compress': compress, 'pickle_only': pickle_only, 'pickle_module': pickle_module, 'pickle_protocol': pickle_protocol}", ""], "lineno": [[[78, 8], [78, 30]], [[79, 8], [84, 9]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/export/builder.py", "cl": "Builder", "me": "save_s3", "idiom": "Assign Multi Targets", "compli_code": ["bucket_name = url.netloc", "s3 = self.get_boto_session().resource('s3')"], "simple_code": ["bucket_name , s3  = url.netloc, self.get_boto_session().resource('s3')", ""], "lineno": [[[148, 8], [148, 32]], [[149, 8], [149, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/utils/config.py", "cl": "", "me": "generate_config_from_template", "idiom": "Assign Multi Targets", "compli_code": ["basename = os.path.basename(template_path)", "loader = jinja2.FileSystemLoader(searchpath=dirname)"], "simple_code": ["basename , loader  = os.path.basename(template_path), jinja2.FileSystemLoader(searchpath=dirname)", ""], "lineno": [[[52, 4], [52, 46]], [[53, 4], [53, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/ssh.py", "cl": "SSHCluster", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.orchestrator_ip = orchestrator_ip", "self.factories_ips = factories_ips", "self.remote_context = remote_context", "self.use_public = use_public"], "simple_code": ["self.orchestrator_ip , self.factories_ips , self.remote_context , self.use_public  = orchestrator_ip, factories_ips, remote_context, use_public", "", "", ""], "lineno": [[[40, 8], [40, 46]], [[41, 8], [41, 42]], [[42, 8], [42, 44]], [[44, 8], [44, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/ssh.py", "cl": "SSHCluster", "me": "rsync_hosts", "idiom": "Assign Multi Targets", "compli_code": ["exclude = [\"state.pkl\"]", "orch = self.orchestrator"], "simple_code": ["exclude , orch  = ['state.pkl'], self.orchestrator", ""], "lineno": [[[98, 8], [98, 31]], [[100, 8], [100, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/ssh.py", "cl": "SSHCluster", "me": "load_all_instances", "idiom": "Call Star", "compli_code": ["self.orchestrator_ip[0],\n                                                      self.orchestrator_ip[1]\n                                                      use_public=self.use_pub"], "simple_code": ["*self.orchestrator_ip[:2]"], "lineno": [[[63, 54], [64, 77]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/ssh.py", "cl": "SSHCluster", "me": "load_all_instances", "idiom": "Call Star", "compli_code": ["each[0], each[1], use_public=self.use_public)"], "simple_code": ["*each[:2]"], "lineno": [[[73, 43], [73, 59]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/ssh.py", "cl": "SSHCluster", "me": "load_all_instances", "idiom": "Call Star", "compli_code": ["each[0], each[1], use_public=self.use_public)"], "simple_code": ["*each[:2]"], "lineno": [[[75, 51], [75, 67]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "run_cmds", "idiom": "List Comprehension", "compli_code": ["futures = []", "for ins in self._get_all_hosts():\n                futures.append(executor.submit(ins.run_cmds, setup_cmds))"], "simple_code": ["", "futures = [executor.submit(ins.run_cmds, setup_cmds) for ins in self._get_all_hosts()]"], "lineno": [[[309, 12], [309, 24]], [[311, 12], [312, 73]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "existing_ray_cluster", "idiom": "List Comprehension", "compli_code": ["ret = []", "for h in self._get_all_hosts():\n            if h.is_node_running():\n                ret.append(h)"], "simple_code": ["", "ret = [h for h in self._get_all_hosts() if h.is_node_running()]"], "lineno": [[[444, 8], [444, 16]], [[445, 8], [447, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "existing_flambe_execution", "idiom": "List Comprehension", "compli_code": ["ret = []", "for h in self._get_all_hosts():\n            if h.is_flambe_running():\n                ret.append(h)"], "simple_code": ["", "ret = [h for h in self._get_all_hosts() if h.is_flambe_running()]"], "lineno": [[[460, 8], [460, 16]], [[461, 8], [463, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "create_dirs", "idiom": "Dict Comprehension", "compli_code": ["futures = {}", "for ins in self._get_all_hosts():\n                futures[executor.submit(ins.create_dirs, relative_dirs)] = ins"], "simple_code": ["", "futures = {executor.submit(ins.create_dirs, relative_dirs): ins for ins in self._get_all_hosts()}"], "lineno": [[[211, 12], [211, 24]], [[213, 12], [214, 78]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "prepare_all_instances", "idiom": "Dict Comprehension", "compli_code": ["futures = {}", "for ins in self._get_all_hosts():\n                futures[executor.submit(ins.prepare)] = ins"], "simple_code": ["", "futures = {executor.submit(ins.prepare): ins for ins in self._get_all_hosts()}"], "lineno": [[[237, 12], [237, 24]], [[239, 12], [240, 59]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "launch_ray_cluster", "idiom": "Dict Comprehension", "compli_code": ["futures = {}", "for ins in self.factories:\n                futures[executor.submit(ins.launch_node, redis_address)] = ins"], "simple_code": ["", "futures = {executor.submit(ins.launch_node, redis_address): ins for ins in self.factories}"], "lineno": [[[384, 12], [384, 24]], [[386, 12], [387, 78]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "distribute_keys", "idiom": "Dict Comprehension", "compli_code": ["futures = {}", "for ins in self._get_all_hosts():\n                futures[executor.submit(m, ins)] = ins"], "simple_code": ["", "futures = {executor.submit(m, ins): ins for ins in self._get_all_hosts()}"], "lineno": [[[811, 12], [811, 24]], [[813, 12], [814, 54]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.name = name", "self.factories_num = factories_num", "self.setup_cmds = setup_cmds", "self.key = os.path.abspath(os.path.expanduser(key))", "self.username = username", "self.debug = is_dev_mode()"], "simple_code": ["self.name , self.factories_num , self.setup_cmds , self.key , self.username , self.debug  = name, factories_num, setup_cmds, os.path.abspath(os.path.expanduser(key)), username, is_dev_mode()", "", "", "", "", ""], "lineno": [[[92, 8], [92, 24]], [[93, 8], [93, 42]], [[94, 8], [94, 36]], [[96, 8], [96, 59]], [[97, 8], [97, 32]], [[99, 8], [99, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "cluster_has_key", "idiom": "Assign Multi Targets", "compli_code": ["private_key = f\"{ins.get_home_path()}/{const.PRIVATE_KEY}\"", "public_key = f\"{ins.get_home_path()}/{const.PUBLIC_KEY}\""], "simple_code": ["private_key , public_key  = f'{ins.get_home_path()}/{const.PRIVATE_KEY}', f'{ins.get_home_path()}/{const.PUBLIC_KEY}'", ""], "lineno": [[[734, 12], [734, 70]], [[735, 12], [735, 68]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "cluster_has_key", "idiom": "Assign Multi Targets", "compli_code": ["pub_ret = ins._run_cmd(f\"ls {public_key}\")", "priv_ret = ins._run_cmd(f\"ls {private_key}\")"], "simple_code": ["pub_ret , priv_ret  = ins._run_cmd(f'ls {public_key}'), ins._run_cmd(f'ls {private_key}')", ""], "lineno": [[[736, 12], [736, 54]], [[737, 12], [737, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "distribute_keys", "idiom": "Assign Multi Targets", "compli_code": ["public_key = key.public_key().public_bytes(serialization.Encoding.OpenSSH,\n                                                   serialization.PublicFormat.OpenSSH)", "pem = key.private_bytes(encoding=serialization.Encoding.PEM,\n                                format=serialization.PrivateFormat.TraditionalOpenSSL,\n                                encryption_algorithm=serialization.NoEncryption())"], "simple_code": ["public_key , pem  = key.public_key().public_bytes(serialization.Encoding.OpenSSH, serialization.PublicFormat.OpenSSH), key.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.TraditionalOpenSSL, encryption_algorithm=serialization.NoEncryption())", ""], "lineno": [[[774, 8], [775, 86]], [[778, 8], [780, 82]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/cluster.py", "cl": "Cluster", "me": "distribute_keys", "idiom": "Assign Multi Targets", "compli_code": ["private_key_str = pem.decode('utf-8')", "public_key_str = public_key.decode('utf-8')"], "simple_code": ["private_key_str , public_key_str  = pem.decode('utf-8'), public_key.decode('utf-8')", ""], "lineno": [[[783, 8], [783, 45]], [[784, 8], [784, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "_get_existing_tags", "idiom": "Dict Comprehension", "compli_code": ["for t in boto_instance.tags:\n                ret[t['Key']] = t['Value']"], "simple_code": ["ret = {t['Key']: t['Value'] for t in boto_instance.tags}"], "lineno": [[[321, 12], [322, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "rollback_env", "idiom": "Truth Value Test", "compli_code": ["len(self.factories) == 0"], "simple_code": ["not len(self.factories)"], "lineno": [[[672, 45], [672, 69]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.factories_type = factories_type", "self.orchestrator_type = orchestrator_type", "self.region_name = region_name"], "simple_code": ["self.factories_type , self.orchestrator_type , self.region_name  = factories_type, orchestrator_type, region_name", "", ""], "lineno": [[[138, 8], [138, 44]], [[139, 8], [139, 50]], [[141, 8], [141, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.cloudwatch = self.sess.client('cloudwatch')", "self.factory_ami = factory_ami", "self.orchestrator_ami = orchestrator_ami", "self.key_name = key_name", "self.creator = creator", "self.tags = tags", "self.security_group = security_group", "self.subnet_id = subnet_id", "self.volume_size = volume_size", "self.dedicated = dedicated", "self.orchestrator_timeout = orchestrator_timeout", "self.factories_timeout = factories_timeout"], "simple_code": ["self.cloudwatch , self.factory_ami , self.orchestrator_ami , self.key_name , self.creator , self.tags , self.security_group , self.subnet_id , self.volume_size , self.dedicated , self.orchestrator_timeout , self.factories_timeout  = self.sess.client('cloudwatch'), factory_ami, orchestrator_ami, key_name, creator, tags, security_group, subnet_id, volume_size, dedicated, orchestrator_timeout, factories_timeout", "", "", "", "", "", "", "", "", "", "", ""], "lineno": [[[146, 8], [146, 56]], [[148, 8], [148, 38]], [[149, 8], [149, 48]], [[151, 8], [151, 32]], [[153, 8], [153, 30]], [[154, 8], [154, 24]], [[156, 8], [156, 44]], [[157, 8], [157, 34]], [[158, 8], [158, 38]], [[160, 8], [160, 34]], [[162, 8], [162, 56]], [[163, 8], [163, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "_existing_cluster", "idiom": "Assign Multi Targets", "compli_code": ["orchestrator = None", "factories = []"], "simple_code": ["orchestrator , factories  = None, []", ""], "lineno": [[[285, 8], [285, 27]], [[286, 8], [286, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "_generic_launch_instances", "idiom": "Assign Multi Targets", "compli_code": ["tags['Role'] = role", "tags['Name'] = self._get_creation_name(role)"], "simple_code": ["tags['Role'] , tags['Name']  = role, self._get_creation_name(role)", ""], "lineno": [[[534, 8], [534, 27]], [[537, 8], [537, 52]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/aws.py", "cl": "AWSCluster", "me": "_generic_launch_instances", "idiom": "Assign Multi Targets", "compli_code": ["bdm = [\n            {\n                'DeviceName': '/dev/sda1',\n                'Ebs': ebs,\n            }\n        ]", "tags_param = [\n            {\n                'ResourceType': 'instance',\n                'Tags': boto_tags\n            },\n            {\n                'ResourceType': 'volume',\n                'Tags': boto_tags\n            },\n        ]", "placement = {\n            'Tenancy': 'dedicated' if self.dedicated else 'default',\n        }"], "simple_code": ["bdm , tags_param , placement  = [{'DeviceName': '/dev/sda1', 'Ebs': ebs}], [{'ResourceType': 'instance', 'Tags': boto_tags}, {'ResourceType': 'volume', 'Tags': boto_tags}], {'Tenancy': 'dedicated' if self.dedicated else 'default'}", "", ""], "lineno": [[[549, 8], [554, 9]], [[555, 8], [564, 9]], [[565, 8], [567, 9]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/instance/instance.py", "cl": "Instance", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.host = host", "self.private_host = private_host", "self.username = username", "self.key = key", "self.config = config"], "simple_code": ["self.host , self.private_host , self.username , self.key , self.config  = host, private_host, username, key, config", "", "", "", ""], "lineno": [[[88, 8], [88, 24]], [[89, 8], [89, 40]], [[90, 8], [90, 32]], [[91, 8], [91, 22]], [[93, 8], [93, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/instance/instance.py", "cl": "Instance", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.use_public = use_public", "self.debug = debug"], "simple_code": ["self.use_public , self.debug  = use_public, debug", ""], "lineno": [[[96, 8], [96, 36]], [[97, 8], [97, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/instance/instance.py", "cl": "Instance", "me": "_remote_script", "idiom": "Assign Multi Targets", "compli_code": ["random_fname = f\"{desc}_{uuid.uuid4().hex}.sh\"", "cli = paramiko.SSHClient()"], "simple_code": ["random_fname , cli  = f'{desc}_{uuid.uuid4().hex}.sh', paramiko.SSHClient()", ""], "lineno": [[[368, 8], [368, 54]], [[370, 8], [370, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/instance/instance.py", "cl": "Instance", "me": "send_rsync", "idiom": "Assign Multi Targets", "compli_code": ["_to = f\"{self.username}@{self.host if self.use_public else self.private_host}:{remote_path}\"", "rsync_params = \"\""], "simple_code": ["_to , rsync_params  = f'{self.username}@{(self.host if self.use_public else self.private_host)}:{remote_path}', ''", ""], "lineno": [[[437, 8], [437, 100]], [[439, 8], [439, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/cluster/instance/instance.py", "cl": "Instance", "me": "install_flambe", "idiom": "Assign Multi Targets", "compli_code": ["origin = get_flambe_repo_location()", "destination = os.path.join(self.get_home_path(), \"extensions\", \"flambe\")"], "simple_code": ["origin , destination  = get_flambe_repo_location(), os.path.join(self.get_home_path(), 'extensions', 'flambe')", ""], "lineno": [[[628, 12], [628, 47]], [[629, 12], [629, 84]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/runner/report_site_run.py", "cl": "", "me": "", "idiom": "Assign Multi Targets", "compli_code": ["app.config['progress_file'] = args.progress_file", "app.config['output_log'] = args.output_log", "app.config['output_dir'] = args.output_dir", "app.config['tensorboard_url'] = args.tensorboard_url"], "simple_code": ["app.config['progress_file'] , app.config['output_log'] , app.config['output_dir'] , app.config['tensorboard_url']  = args.progress_file, args.output_log, args.output_dir, args.tensorboard_url", "", "", ""], "lineno": [[[48, 4], [48, 52]], [[49, 4], [49, 46]], [[50, 4], [50, 46]], [[51, 4], [51, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/runner/run.py", "cl": "", "me": "main", "idiom": "Assign Multi Targets", "compli_code": ["destiny = os.path.join(cluster.get_orch_home_path(), \"extensions\")", "t = os.path.join(FLAMBE_GLOBAL_FOLDER, \"extensions\")"], "simple_code": ["destiny , t  = os.path.join(cluster.get_orch_home_path(), 'extensions'), os.path.join(FLAMBE_GLOBAL_FOLDER, 'extensions')", ""], "lineno": [[[74, 20], [74, 86]], [[78, 20], [78, 72]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/runner/run.py", "cl": "", "me": "main", "idiom": "Assign Multi Targets", "compli_code": ["new_extensions = cluster.send_local_content(extensions,\n                                                                destiny, all_hosts=True)", "new_secrets = cluster.send_secrets()"], "simple_code": ["new_extensions , new_secrets  = cluster.send_local_content(extensions, destiny, all_hosts=True), cluster.send_secrets()", ""], "lineno": [[[84, 20], [85, 88]], [[87, 20], [87, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/tokenizer/word.py", "cl": "NGramsTokenizer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.ngrams = ngrams", "self.exclude_stopwords = exclude_stopwords"], "simple_code": ["self.ngrams , self.exclude_stopwords  = ngrams, exclude_stopwords", ""], "lineno": [[[97, 8], [97, 28]], [[98, 8], [98, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/vision/classification/model.py", "cl": "ImageClassifier", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.encoder = encoder", "self.output_layer = output_layer"], "simple_code": ["self.encoder , self.output_layer  = encoder, output_layer", ""], "lineno": [[[27, 8], [27, 30]], [[28, 8], [28, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/vision/classification/datasets.py", "cl": "MNISTDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.test_images = test_images", "self.test_labels = test_labels"], "simple_code": ["self.test_images , self.test_labels  = test_images, test_labels", ""], "lineno": [[[63, 8], [63, 38]], [[64, 8], [64, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/vision/classification/datasets.py", "cl": "MNISTDataset", "me": "_parse_idx", "idiom": "Assign Multi Targets", "compli_code": ["data_type = magic // 256", "shape = [int.from_bytes(data[4 * (i + 1): 4 * (i + 2)], 'big') for i in range(dim)]"], "simple_code": ["data_type , shape  = magic // 256, [int.from_bytes(data[4 * (i + 1):4 * (i + 2)], 'big') for i in range(dim)]", ""], "lineno": [[[139, 8], [139, 32]], [[141, 8], [141, 91]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/bow.py", "cl": "BoWField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.tokenizer = tokenizer or NGramsTokenizer()", "self.lower = lower", "self.unk = unk_token", "self.min_freq = min_freq", "self.normalize = normalize", "self.scale_factor = scale_factor"], "simple_code": ["self.tokenizer , self.lower , self.unk , self.min_freq , self.normalize , self.scale_factor  = tokenizer or NGramsTokenizer(), lower, unk_token, min_freq, normalize, scale_factor", "", "", "", "", ""], "lineno": [[[63, 8], [63, 55]], [[64, 8], [64, 26]], [[65, 8], [65, 28]], [[67, 8], [67, 32]], [[68, 8], [68, 34]], [[69, 8], [69, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/bow.py", "cl": "BoWField", "me": "process", "idiom": "Assign Multi Targets", "compli_code": ["tokens = self.tokenizer(example)", "numericals = [0] * len(self.vocab)"], "simple_code": ["tokens , numericals  = self.tokenizer(example), [0] * len(self.vocab)", ""], "lineno": [[[95, 8], [95, 40]], [[98, 8], [98, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/text.py", "cl": "TextField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.tokenizer = tokenizer or WordTokenizer()", "self.lower = lower", "self.pad = pad_token", "self.unk = unk_token", "self.sos = sos_token", "self.eos = eos_token", "self.embeddings_info = embeddings_info"], "simple_code": ["self.tokenizer , self.lower , self.pad , self.unk , self.sos , self.eos , self.embeddings_info  = tokenizer or WordTokenizer(), lower, pad_token, unk_token, sos_token, eos_token, embeddings_info", "", "", "", "", "", ""], "lineno": [[[243, 8], [243, 53]], [[244, 8], [244, 26]], [[246, 8], [246, 28]], [[247, 8], [247, 28]], [[248, 8], [248, 28]], [[249, 8], [249, 28]], [[251, 8], [251, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/text.py", "cl": "TextField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.max_seq_len = max_seq_len", "self.truncate_end = truncate_end"], "simple_code": ["self.max_seq_len , self.truncate_end  = max_seq_len, truncate_end", ""], "lineno": [[[255, 8], [255, 38]], [[256, 8], [256, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/label.py", "cl": "LabelField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.one_hot = one_hot", "self.multilabel_sep = multilabel_sep"], "simple_code": ["self.one_hot , self.multilabel_sep  = one_hot, multilabel_sep", ""], "lineno": [[[39, 8], [39, 30]], [[40, 8], [40, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/label.py", "cl": "LabelField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.label_given = True", "self.vocab = odict((label, i) for i, label in enumerate(label_list))"], "simple_code": ["self.label_given , self.vocab  = True, odict(((label, i) for (i, label) in enumerate(label_list)))", ""], "lineno": [[[51, 12], [51, 35]], [[52, 12], [52, 80]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/label.py", "cl": "LabelField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.label_given = False", "self.vocab = odict()", "self.label_count_dict = dict()"], "simple_code": ["self.label_given , self.vocab , self.label_count_dict  = False, odict(), dict()", "", ""], "lineno": [[[55, 12], [55, 36]], [[56, 12], [56, 32]], [[57, 12], [57, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/label.py", "cl": "LabelField", "me": "setup", "idiom": "Assign Multi Targets", "compli_code": ["self.vocab[token] = len(self.vocab)", "self.label_count_dict[token] = 1"], "simple_code": ["self.vocab[token] , self.label_count_dict[token]  = len(self.vocab), 1", ""], "lineno": [[[84, 24], [84, 59]], [[85, 24], [85, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/field/label.py", "cl": "LabelField", "me": "process", "idiom": "Assign Multi Targets", "compli_code": ["tokens = self.tokenizer(example)", "numericals = []"], "simple_code": ["tokens , numericals  = self.tokenizer(example), []", ""], "lineno": [[[103, 8], [103, 40]], [[106, 8], [106, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/downloader.py", "cl": "", "me": "s3_exists", "idiom": "Assign Multi Targets", "compli_code": ["bucket = s3.Bucket(url.netloc)", "path = url.path[1:]"], "simple_code": ["bucket , path  = s3.Bucket(url.netloc), url.path[1:]", ""], "lineno": [[[31, 8], [31, 38]], [[32, 8], [32, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/downloader.py", "cl": "", "me": "s3_remote_file", "idiom": "Assign Multi Targets", "compli_code": ["bucket = s3.Bucket(url.netloc)", "path = url.path[1:]"], "simple_code": ["bucket , path  = s3.Bucket(url.netloc), url.path[1:]", ""], "lineno": [[[54, 4], [54, 34]], [[55, 4], [55, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/downloader.py", "cl": "", "me": "download_s3_file", "idiom": "Assign Multi Targets", "compli_code": ["parsed_url = urlparse(url)", "s3 = boto3.client('s3')"], "simple_code": ["parsed_url , s3  = urlparse(url), boto3.client('s3')", ""], "lineno": [[[76, 8], [76, 34]], [[77, 8], [77, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/downloader.py", "cl": "", "me": "download_manager", "idiom": "Assign Multi Targets", "compli_code": ["tmp_dir = tempfile.TemporaryDirectory()", "trailing_url = url.path[:-1] if url.path.endswith('/') else url.path"], "simple_code": ["tmp_dir , trailing_url  = tempfile.TemporaryDirectory(), url.path[:-1] if url.path.endswith('/') else url.path", ""], "lineno": [[[187, 12], [187, 51]], [[188, 12], [188, 80]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/registrable.py", "cl": "Registrable", "me": "register_tag", "idiom": "Chain Compare", "compli_code": ["tag_namespace is None and top_level_module_name is not None"], "simple_code": ["tag_namespace is None is not top_level_module_name"], "lineno": [[[117, 14], [117, 73]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/registrable.py", "cl": "Registrable", "me": "register_tag", "idiom": "Chain Compare", "compli_code": ["top_level_module_name != 'flambe' and top_level_module_name != 'tests'"], "simple_code": ["'flambe' != top_level_module_name != 'tests'"], "lineno": [[[118, 17], [118, 87]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/registrable.py", "cl": "Registrable", "me": "get_default_tag", "idiom": "Chain Compare", "compli_code": ["(factory_name is not None) and \\\n                    (factory_name not in class_._yaml_registered_factories)"], "simple_code": ["None is not factory_name not in class_._yaml_registered_factories"], "lineno": [[[194, 15], [195, 75]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/registrable.py", "cl": "registration_context", "me": "__enter__", "idiom": "Assign Multi Targets", "compli_code": ["self._prev_reg_prefix = _reg_prefix", "_reg_prefix = self._namespace"], "simple_code": ["self._prev_reg_prefix , _reg_prefix  = _reg_prefix, self._namespace", ""], "lineno": [[[64, 8], [64, 43]], [[65, 8], [65, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "save_state_to_file", "idiom": "Truth Value Test", "compli_code": ["len(dir_contents) != 0"], "simple_code": ["len(dir_contents)"], "lineno": [[[246, 15], [246, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "_convert_to_tree", "idiom": "Assign Multi Targets", "compli_code": ["current_dict = tree", "component_keys = compound_key.split(STATE_DICT_DELIMETER)", "last_node_i = 0"], "simple_code": ["current_dict , component_keys , last_node_i  = tree, compound_key.split(STATE_DICT_DELIMETER), 0", "", ""], "lineno": [[[65, 8], [65, 27]], [[66, 8], [66, 65]], [[67, 8], [67, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "_convert_to_tree", "idiom": "Assign Multi Targets", "compli_code": ["prefix = STATE_DICT_DELIMETER.join(component_keys[:i + 1])", "current_value = current_dict.children.get(key)"], "simple_code": ["prefix , current_value  = STATE_DICT_DELIMETER.join(component_keys[:i + 1]), current_dict.children.get(key)", ""], "lineno": [[[74, 12], [74, 70]], [[75, 12], [75, 58]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "_fetch_tree_item", "idiom": "Assign Multi Targets", "compli_code": ["current = save_tree", "last_i = 0"], "simple_code": ["current , last_i  = save_tree, 0", ""], "lineno": [[[102, 4], [102, 23]], [[103, 4], [103, 14]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "_fetch_tree_item", "idiom": "Assign Multi Targets", "compli_code": ["current = current.children[current_key]", "last_i = i + 1"], "simple_code": ["current , last_i  = current.children[current_key], i + 1", ""], "lineno": [[[107, 12], [107, 51]], [[108, 12], [108, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "save_state_to_file", "idiom": "Assign Multi Targets", "compli_code": ["original_path = path", "temp = tempfile.TemporaryDirectory()"], "simple_code": ["original_path , temp  = path, tempfile.TemporaryDirectory()", ""], "lineno": [[[256, 8], [256, 28]], [[257, 8], [257, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "load_state_from_file", "idiom": "Assign Multi Targets", "compli_code": ["state._metadata = OrderedDict({FLAMBE_DIRECTORIES_KEY: set()})", "temp = None"], "simple_code": ["state._metadata , temp  = OrderedDict({FLAMBE_DIRECTORIES_KEY: set()}), None", ""], "lineno": [[[381, 8], [381, 70]], [[382, 8], [382, 19]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "load_state_from_file", "idiom": "Assign Multi Targets", "compli_code": ["prefix = _extract_prefix(path, current_dir)", "protocol_version_file = os.path.join(current_dir, PROTOCOL_VERSION_FILE_NAME)"], "simple_code": ["prefix , protocol_version_file  = _extract_prefix(path, current_dir), os.path.join(current_dir, PROTOCOL_VERSION_FILE_NAME)", ""], "lineno": [[[392, 20], [392, 63]], [[393, 20], [393, 97]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/serialization.py", "cl": "", "me": "load", "idiom": "Assign Multi Targets", "compli_code": ["yaml_config = state._metadata[''][FLAMBE_CONFIG_KEY]", "stash = state._metadata[''][FLAMBE_STASH_KEY] \\\n        if FLAMBE_STASH_KEY in state._metadata[''] else None"], "simple_code": ["yaml_config , stash  = state._metadata[''][FLAMBE_CONFIG_KEY], state._metadata[''][FLAMBE_STASH_KEY] if FLAMBE_STASH_KEY in state._metadata[''] else None", ""], "lineno": [[[482, 4], [482, 56]], [[483, 4], [484, 60]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Schema", "me": "add_extensions_metadata", "idiom": "Chain Compare", "compli_code": ["top_level_module is not None and top_level_module in extensions"], "simple_code": ["None is not top_level_module in extensions"], "lineno": [[[142, 11], [142, 74]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "parse_link_str", "idiom": "Truth Value Test", "compli_code": ["len(attr_path[0]) == 0"], "simple_code": ["not len(attr_path[0])"], "lineno": [[[484, 11], [484, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "parse_link_str", "idiom": "Truth Value Test", "compli_code": ["len(temp[0]) != 0"], "simple_code": ["len(temp[0])"], "lineno": [[[468, 15], [468, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "parse_link_str", "idiom": "Truth Value Test", "compli_code": ["len(schematic_path) != 0"], "simple_code": ["len(schematic_path)"], "lineno": [[[469, 19], [469, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "parse_link_str", "idiom": "Truth Value Test", "compli_code": ["len(schematic_path) == 0"], "simple_code": ["not len(schematic_path)"], "lineno": [[[476, 19], [476, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "create_link_str", "idiom": "Truth Value Test", "compli_code": ["len(schematic_path) == 0"], "simple_code": ["not len(schematic_path)"], "lineno": [[[533, 7], [533, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Schema", "me": "__call__", "idiom": "Assign Multi Targets", "compli_code": ["compiled._schema = self", "compiled._created_with_tag = self._created_with_tag"], "simple_code": ["compiled._schema , compiled._created_with_tag  = self, self._created_with_tag", ""], "lineno": [[[122, 8], [122, 31]], [[123, 8], [123, 59]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Schema", "me": "__repr__", "idiom": "Assign Multi Targets", "compli_code": ["keywords = \", \".join(\"{}={!r}\".format(k, v) for k, v in sorted(self.keywords.items()))", "format_string = \"{module}.{cls}({component_subclass}, {keywords})\""], "simple_code": ["keywords , format_string  = ', '.join(('{}={!r}'.format(k, v) for (k, v) in sorted(self.keywords.items()))), '{module}.{cls}({component_subclass}, {keywords})'", ""], "lineno": [[[243, 8], [243, 94]], [[244, 8], [244, 74]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Schema", "me": "deserialize", "idiom": "Assign Multi Targets", "compli_code": ["extensions = data['extensions']", "obj = yaml.load(yaml_str)"], "simple_code": ["extensions , obj  = data['extensions'], yaml.load(yaml_str)", ""], "lineno": [[[302, 8], [302, 39]], [[303, 8], [303, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "contextualized_linking", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.root_obj = root_obj", "self.prefix = prefix"], "simple_code": ["self.root_obj , self.prefix  = root_obj, prefix", ""], "lineno": [[[335, 8], [335, 32]], [[336, 8], [336, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "contextualized_linking", "me": "__enter__", "idiom": "Assign Multi Targets", "compli_code": ["self.old_root = _link_root_obj", "self.old_active = _link_context_active", "self.old_stash = _link_obj_stash", "_link_root_obj = self.root_obj", "_link_context_active = True", "_link_obj_stash = {}"], "simple_code": ["self.old_root , self.old_active , self.old_stash , _link_root_obj , _link_context_active , _link_obj_stash  = _link_root_obj, _link_context_active, _link_obj_stash, self.root_obj, True, {}", "", "", "", "", ""], "lineno": [[[345, 8], [345, 38]], [[346, 8], [346, 46]], [[347, 8], [347, 40]], [[348, 8], [348, 38]], [[349, 8], [349, 35]], [[350, 8], [350, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "contextualized_linking", "me": "__exit__", "idiom": "Assign Multi Targets", "compli_code": ["_link_root_obj = self.old_root", "_link_context_active = self.old_active", "_link_obj_stash = self.old_stash"], "simple_code": ["_link_root_obj , _link_context_active , _link_obj_stash  = self.old_root, self.old_active, self.old_stash", "", ""], "lineno": [[[357, 8], [357, 38]], [[358, 8], [358, 46]], [[359, 8], [359, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "PickledDataLink", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.obj_id = obj_id", "self.obj_value = value"], "simple_code": ["self.obj_id , self.obj_value  = obj_id, value", ""], "lineno": [[[366, 8], [366, 28]], [[367, 8], [367, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "parse_link_str", "idiom": "Assign Multi Targets", "compli_code": ["x = link_str", "bracket_open = False", "root_extracted = False"], "simple_code": ["x , bracket_open , root_extracted  = link_str, False, False", "", ""], "lineno": [[[446, 4], [446, 16]], [[448, 4], [448, 24]], [[449, 4], [449, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "create_link_str", "idiom": "Assign Multi Targets", "compli_code": ["schematic_str = ''", "attr_str = ''"], "simple_code": ["schematic_str , attr_str  = '', ''", ""], "lineno": [[[536, 4], [536, 22]], [[537, 4], [537, 17]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Link", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.schematic_path = schematic_path", "self.attr_path = attr_path", "self.target = target"], "simple_code": ["self.schematic_path , self.attr_path , self.target  = schematic_path, attr_path, target", "", ""], "lineno": [[[595, 8], [595, 44]], [[596, 8], [596, 34]], [[597, 8], [597, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "fill_defaults", "idiom": "Assign Multi Targets", "compli_code": ["signature = inspect.signature(function)", "kwargs_with_defaults = kwargs.copy()"], "simple_code": ["signature , kwargs_with_defaults  = inspect.signature(function), kwargs.copy()", ""], "lineno": [[[727, 4], [727, 43]], [[728, 4], [728, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "_config_str", "idiom": "Assign Multi Targets", "compli_code": ["config = \"\"", "stream = StringIO()"], "simple_code": ["config , stream  = '', StringIO()", ""], "lineno": [[[837, 12], [837, 23]], [[838, 12], [838, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "_state_dict_hook", "idiom": "Assign Multi Targets", "compli_code": ["local_metadata[VERSION_KEY] = self._flambe_version", "local_metadata[FLAMBE_CLASS_KEY] = type(self).__name__", "local_metadata[FLAMBE_SOURCE_KEY] = dill.source.getsource(type(self))"], "simple_code": ["local_metadata[VERSION_KEY] , local_metadata[FLAMBE_CLASS_KEY] , local_metadata[FLAMBE_SOURCE_KEY]  = self._flambe_version, type(self).__name__, dill.source.getsource(type(self))", "", ""], "lineno": [[[950, 8], [950, 58]], [[951, 8], [951, 62]], [[952, 8], [952, 77]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "_state_dict_hook", "idiom": "Assign Multi Targets", "compli_code": ["state_dict._metadata[FLAMBE_DIRECTORIES_KEY] = set()", "warn_use_state = True"], "simple_code": ["state_dict._metadata[FLAMBE_DIRECTORIES_KEY] , warn_use_state  = set(), True", ""], "lineno": [[[941, 12], [941, 64]], [[942, 12], [942, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "_state_dict_hook", "idiom": "Assign Multi Targets", "compli_code": ["state_dict._metadata[KEEP_VARS_KEY] = False", "warn_use_state = True"], "simple_code": ["state_dict._metadata[KEEP_VARS_KEY] , warn_use_state  = False, True", ""], "lineno": [[[944, 12], [944, 55]], [[945, 12], [945, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "_load_state_dict_hook", "idiom": "Assign Multi Targets", "compli_code": ["original_source = local_metadata[FLAMBE_SOURCE_KEY]", "current_source = dill.source.getsource(type(self))"], "simple_code": ["original_source , current_source  = local_metadata[FLAMBE_SOURCE_KEY], dill.source.getsource(type(self))", ""], "lineno": [[[1146, 12], [1146, 63]], [[1147, 12], [1147, 62]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "load_state", "idiom": "Assign Multi Targets", "compli_code": ["metadata = getattr(state_dict, '_metadata', None)", "state_dict = state_dict.copy()"], "simple_code": ["metadata , state_dict  = getattr(state_dict, '_metadata', None), state_dict.copy()", ""], "lineno": [[[1223, 8], [1223, 57]], [[1224, 8], [1224, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "load_from_path", "idiom": "Assign Multi Targets", "compli_code": ["loaded_state = load_state_from_file(path, map_location=map_location)", "instance = cls(**kwargs)"], "simple_code": ["loaded_state , instance  = load_state_from_file(path, map_location=map_location), cls(**kwargs)", ""], "lineno": [[[1275, 12], [1275, 80]], [[1276, 12], [1276, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "Component", "me": "compile", "idiom": "Assign Multi Targets", "compli_code": ["instance._saved_kwargs = kwargs_with_defaults", "instance._extensions = extensions"], "simple_code": ["instance._saved_kwargs , instance._extensions  = kwargs_with_defaults, extensions", ""], "lineno": [[[1435, 8], [1435, 53]], [[1436, 8], [1436, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/component.py", "cl": "", "me": "dynamic_component", "idiom": "Assign Multi Targets", "compli_code": ["_MISSING = object()", "copied_attrs = {}"], "simple_code": ["_MISSING , copied_attrs  = object(), {}", ""], "lineno": [[[1475, 4], [1475, 23]], [[1476, 4], [1476, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/extensions.py", "cl": "", "me": "_download_svn", "idiom": "Truth Value Test", "compli_code": ["ret != 0"], "simple_code": ["ret"], "lineno": [[[179, 7], [179, 15]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/extensions.py", "cl": "", "me": "_download_remote_extension", "idiom": "Assign Multi Targets", "compli_code": ["https_ext = url.scheme == 'https'", "desc = list(filter(lambda x: len(x) > 0, url.path.split('/')))"], "simple_code": ["https_ext , desc  = url.scheme == 'https', list(filter(lambda x: len(x) > 0, url.path.split('/')))", ""], "lineno": [[[80, 4], [80, 37]], [[81, 4], [81, 66]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/extensions.py", "cl": "", "me": "_download_remote_extension", "idiom": "Assign Multi Targets", "compli_code": ["new_url = f\"{url.scheme}://{url.hostname}/{user}/{repository}\"", "location = f\"{location}/{'/'.join(desc[4:])}\"", "url_path = f\"{user}/{repository}\""], "simple_code": ["new_url , location , url_path  = f'{url.scheme}://{url.hostname}/{user}/{repository}', f\"{location}/{'/'.join(desc[4:])}\", f'{user}/{repository}'", "", ""], "lineno": [[[108, 12], [108, 74]], [[109, 12], [109, 57]], [[110, 12], [110, 45]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/compile/extensions.py", "cl": "", "me": "_download_remote_extension", "idiom": "Assign Multi Targets", "compli_code": ["new_url = extension_url if https_ext else extension_url[6:]", "url_path = url.path", "branch = \"master\""], "simple_code": ["new_url , url_path , branch  = extension_url if https_ext else extension_url[6:], url.path, 'master'", "", ""], "lineno": [[[114, 12], [114, 71]], [[115, 12], [115, 31]], [[116, 12], [116, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/script.py", "cl": "Script", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.script = script", "self.args = args"], "simple_code": ["self.script , self.args  = script, args", ""], "lineno": [[[48, 8], [48, 28]], [[49, 8], [49, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/script.py", "cl": "Script", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["parser_kwargs = {f'--{k}': v for k, v in self.kwargs.items()}", "parser_args_flat = [str(item) for item in self.args]"], "simple_code": ["parser_kwargs , parser_args_flat  = {f'--{k}': v for (k, v) in self.kwargs.items()}, [str(item) for item in self.args]", ""], "lineno": [[[67, 8], [67, 69]], [[69, 8], [69, 60]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/script.py", "cl": "Script", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["sys_save = deepcopy(sys.argv)", "sys.argv = [''] + parser_args_flat"], "simple_code": ["sys_save , sys.argv  = deepcopy(sys.argv), [''] + parser_args_flat", ""], "lineno": [[[72, 8], [72, 37]], [[73, 8], [73, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/script.py", "cl": "Script", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["sys.argv = sys_save", "continue_ = False"], "simple_code": ["sys.argv , continue_  = sys_save, False", ""], "lineno": [[[75, 8], [75, 27]], [[77, 8], [77, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "__init__", "idiom": "Chain Compare", "compli_code": ["unlabel_sampler is not None and unlabel_dataset is not None"], "simple_code": ["unlabel_sampler is not None is not unlabel_dataset"], "lineno": [[[139, 11], [139, 70]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.student_model = self.model", "self.teacher_model = teacher_model", "self.teacher_columns = teacher_columns", "self.student_columns = student_columns", "self.alpha_kl = alpha_kl", "self.temp = temperature", "self.unlabel_dataset = None", "self.unlabel_sampler = None"], "simple_code": ["self.student_model , self.teacher_model , self.teacher_columns , self.student_columns , self.alpha_kl , self.temp , self.unlabel_dataset , self.unlabel_sampler  = self.model, teacher_model, teacher_columns, student_columns, alpha_kl, temperature, None, None", "", "", "", "", "", "", ""], "lineno": [[[128, 8], [128, 39]], [[129, 8], [129, 42]], [[131, 8], [131, 46]], [[132, 8], [132, 46]], [[134, 8], [134, 32]], [[135, 8], [135, 31]], [[137, 8], [137, 35]], [[138, 8], [138, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.unlabel_sampler = unlabel_sampler", "self._unlabel_iterator = unlabel_sampler.sample(unlabel_dataset.train, -1)"], "simple_code": ["self.unlabel_sampler , self._unlabel_iterator  = unlabel_sampler, unlabel_sampler.sample(unlabel_dataset.train, -1)", ""], "lineno": [[[140, 12], [140, 50]], [[141, 12], [141, 86]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "_compute_loss", "idiom": "Assign Multi Targets", "compli_code": ["student_batch = [batch[i] for i in student_columns]", "teacher_batch = [batch[i].detach() for i in teacher_columns]"], "simple_code": ["student_batch , teacher_batch  = [batch[i] for i in student_columns], [batch[i].detach() for i in teacher_columns]", ""], "lineno": [[[164, 8], [164, 59]], [[165, 8], [165, 68]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "_compute_loss", "idiom": "Assign Multi Targets", "compli_code": ["loss = torch.tensor(0.).to(self.device)", "student_pred = F.log_softmax(student_logits, dim=-1)"], "simple_code": ["loss , student_pred  = torch.tensor(0.0).to(self.device), F.log_softmax(student_logits, dim=-1)", ""], "lineno": [[[172, 8], [172, 47]], [[173, 8], [173, 60]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "_compute_loss", "idiom": "Assign Multi Targets", "compli_code": ["student_pred = F.log_softmax(student_logits / self.temp, dim=1)", "teacher_pred = F.softmax(teacher_logits / self.temp, dim=1)"], "simple_code": ["student_pred , teacher_pred  = F.log_softmax(student_logits / self.temp, dim=1), F.softmax(teacher_logits / self.temp, dim=1)", ""], "lineno": [[[188, 8], [188, 71]], [[189, 8], [189, 67]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "_compute_loss", "idiom": "Assign Multi Targets", "compli_code": ["student_logits = torch.cat((student_logits, student_unlabel_logits))", "teacher_logits = torch.cat((teacher_logits, teacher_unlabel_logits))"], "simple_code": ["student_logits , teacher_logits  = torch.cat((student_logits, student_unlabel_logits)), torch.cat((teacher_logits, teacher_unlabel_logits))", ""], "lineno": [[[185, 12], [185, 80]], [[186, 12], [186, 80]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/distillation.py", "cl": "DistillationTrainer", "me": "_aggregate_preds", "idiom": "Assign Multi Targets", "compli_code": ["preds = torch.cat(preds, dim=0)", "targets = torch.cat(targets, dim=0)"], "simple_code": ["preds , targets  = torch.cat(preds, dim=0), torch.cat(targets, dim=0)", ""], "lineno": [[[222, 8], [222, 39]], [[223, 8], [223, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/eval.py", "cl": "Evaluator", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.eval_sampler = eval_sampler or BaseSampler(batch_size=16, shuffle=False)", "self.model = model", "self.metric_fn = metric_fn", "self.dataset = dataset", "self.device = select_device(device)", "data = getattr(dataset, eval_data)"], "simple_code": ["self.eval_sampler , self.model , self.metric_fn , self.dataset , self.device , data  = eval_sampler or BaseSampler(batch_size=16, shuffle=False), model, metric_fn, dataset, select_device(device), getattr(dataset, eval_data)", "", "", "", "", ""], "lineno": [[[49, 8], [49, 85]], [[50, 8], [50, 26]], [[51, 8], [51, 34]], [[52, 8], [52, 30]], [[54, 8], [54, 43]], [[56, 8], [56, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/eval.py", "cl": "Evaluator", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self._eval_iterator = self.eval_sampler.sample(data)", "self.tb_log_prefix = None"], "simple_code": ["self._eval_iterator , self.tb_log_prefix  = self.eval_sampler.sample(data), None", ""], "lineno": [[[57, 8], [57, 60]], [[60, 8], [60, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/train.py", "cl": "Trainer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.dataset = dataset", "self.train_sampler = train_sampler", "self.val_sampler = val_sampler", "self.model = model", "self.loss_fn = loss_fn", "self.metric_fn = metric_fn", "self.optimizer = optimizer", "self.scheduler = scheduler", "self.iter_scheduler = iter_scheduler", "self.lower_is_better = lower_is_better", "self.max_grad_norm = max_grad_norm", "self.max_grad_abs_val = max_grad_abs_val", "self.extra_validation_metrics = extra_validation_metrics if \\\n            extra_validation_metrics is not None else []", "self.training_metrics = extra_training_metrics if \\\n            extra_training_metrics is not None else []", "self.extra_training_metrics_log_interval = -1 \\\n            if extra_training_metrics_log_interval is None \\\n            else extra_training_metrics_log_interval", "self.tb_log_prefix = None", "self.device = select_device(device)"], "simple_code": ["self.dataset , self.train_sampler , self.val_sampler , self.model , self.loss_fn , self.metric_fn , self.optimizer , self.scheduler , self.iter_scheduler , self.lower_is_better , self.max_grad_norm , self.max_grad_abs_val , self.extra_validation_metrics , self.training_metrics , self.extra_training_metrics_log_interval , self.tb_log_prefix , self.device  = dataset, train_sampler, val_sampler, model, loss_fn, metric_fn, optimizer, scheduler, iter_scheduler, lower_is_better, max_grad_norm, max_grad_abs_val, extra_validation_metrics if extra_validation_metrics is not None else [], extra_training_metrics if extra_training_metrics is not None else [], -1 if extra_training_metrics_log_interval is None else extra_training_metrics_log_interval, None, select_device(device)", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "lineno": [[[118, 8], [118, 30]], [[119, 8], [119, 42]], [[120, 8], [120, 38]], [[121, 8], [121, 26]], [[122, 8], [122, 30]], [[123, 8], [123, 34]], [[124, 8], [124, 34]], [[125, 8], [125, 34]], [[126, 8], [126, 44]], [[127, 8], [127, 46]], [[128, 8], [128, 42]], [[129, 8], [129, 48]], [[130, 8], [131, 56]], [[132, 8], [133, 54]], [[134, 8], [136, 52]], [[139, 8], [139, 33]], [[142, 8], [142, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/train.py", "cl": "Trainer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.iter_per_step = iter_per_step", "self.max_steps = max_steps", "self._step = 0"], "simple_code": ["self.iter_per_step , self.max_steps , self._step  = iter_per_step, max_steps, 0", "", ""], "lineno": [[[163, 8], [163, 42]], [[164, 8], [164, 34]], [[166, 8], [166, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/train.py", "cl": "Trainer", "me": "_aggregate_preds", "idiom": "Assign Multi Targets", "compli_code": ["loss = sum(loss) / len(loss)", "preds = torch.cat(preds, dim=0)", "targets = torch.cat(targets, dim=0)"], "simple_code": ["loss , preds , targets  = sum(loss) / len(loss), torch.cat(preds, dim=0), torch.cat(targets, dim=0)", "", ""], "lineno": [[[351, 8], [351, 36]], [[352, 8], [352, 39]], [[353, 8], [353, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/learn/train.py", "cl": "Trainer", "me": "_eval_step", "idiom": "Assign Multi Targets", "compli_code": ["val_loss = np.NaN if loss == [] else sum(loss) / len(loss)", "val_metric = self.metric_fn.finalize(metric_fn_state)"], "simple_code": ["val_loss , val_metric  = np.NaN if loss == [] else sum(loss) / len(loss), self.metric_fn.finalize(metric_fn_state)", ""], "lineno": [[[372, 12], [372, 70]], [[373, 12], [373, 65]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "", "me": "setup_global_logging", "idiom": "Assign Multi Targets", "compli_code": ["fh = handlers.RotatingFileHandler(\n        os.path.join(FLAMBE_GLOBAL_FOLDER, 'logs', 'log.log'),\n        maxBytes=10 * MB, backupCount=5\n    )", "formatter = logging.Formatter(\n        '%(asctime)s | %(levelname)-8s | %(name)-8s | %(lineno)04d | %(message)s'\n    )"], "simple_code": ["fh , formatter  = handlers.RotatingFileHandler(os.path.join(FLAMBE_GLOBAL_FOLDER, 'logs', 'log.log'), maxBytes=10 * MB, backupCount=5), logging.Formatter('%(asctime)s | %(levelname)-8s | %(name)-8s | %(lineno)04d | %(message)s')", ""], "lineno": [[[43, 4], [46, 5]], [[47, 4], [49, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "", "me": "setup_global_logging", "idiom": "Assign Multi Targets", "compli_code": ["ch = logging.StreamHandler(stream=tqdm_safe_out)", "formatter = logging.Formatter('%(asctime)s | %(message)s', \"%H:%M:%S\")"], "simple_code": ["ch , formatter  = logging.StreamHandler(stream=tqdm_safe_out), logging.Formatter('%(asctime)s | %(message)s', '%H:%M:%S')", ""], "lineno": [[[53, 4], [53, 52]], [[54, 4], [54, 74]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "TrialLogging", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.log_dir = log_dir", "self.verbose = verbose", "self.log_level = logging.NOTSET", "self.capture_warnings = capture_warnings"], "simple_code": ["self.log_dir , self.verbose , self.log_level , self.capture_warnings  = log_dir, verbose, logging.NOTSET, capture_warnings", "", "", ""], "lineno": [[[82, 8], [82, 30]], [[83, 8], [83, 30]], [[84, 8], [84, 39]], [[85, 8], [85, 48]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "TrialLogging", "me": "__enter__", "idiom": "Assign Multi Targets", "compli_code": ["console_log_level = logging.NOTSET if self.verbose else logging.ERROR", "console_data_log_level = logging.NOTSET if self.verbose else logging.ERROR", "console_file_log_level = logging.NOTSET if self.verbose else logging.INFO", "tensorboard_log_level = logging.NOTSET if self.verbose else logging.INFO"], "simple_code": ["console_log_level , console_data_log_level , console_file_log_level , tensorboard_log_level  = logging.NOTSET if self.verbose else logging.ERROR, logging.NOTSET if self.verbose else logging.ERROR, logging.NOTSET if self.verbose else logging.INFO, logging.NOTSET if self.verbose else logging.INFO", "", "", ""], "lineno": [[[99, 8], [99, 77]], [[100, 8], [100, 82]], [[101, 8], [101, 81]], [[102, 8], [102, 80]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "TrialLogging", "me": "__enter__", "idiom": "Assign Multi Targets", "compli_code": ["logging.root._log_dir = self.log_dir", "self.context_filter = ContextInjection(_console_prefix=self.console_prefix,\n                                               _tf_log_dir=self.log_dir,\n                                               _tf_hparams=self.hyper_params,\n                                               _console_log_dir=self.log_dir)"], "simple_code": ["logging.root._log_dir , self.context_filter  = self.log_dir, ContextInjection(_console_prefix=self.console_prefix, _tf_log_dir=self.log_dir, _tf_hparams=self.hyper_params, _console_log_dir=self.log_dir)", ""], "lineno": [[[150, 8], [150, 44]], [[152, 8], [155, 77]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "", "me": "colorize_exceptions", "idiom": "Assign Multi Targets", "compli_code": ["tbtext = ''.join(traceback.format_exception(type_, value, tb))", "lexer = get_lexer_by_name(\"pytb\", stripall=True)", "formatter = TerminalFormatter()"], "simple_code": ["tbtext , lexer , formatter  = ''.join(traceback.format_exception(type_, value, tb)), get_lexer_by_name('pytb', stripall=True), TerminalFormatter()", "", ""], "lineno": [[[230, 12], [230, 74]], [[231, 12], [231, 60]], [[232, 12], [232, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/logging.py", "cl": "", "me": "colorized_excepthook", "idiom": "Assign Multi Targets", "compli_code": ["tbtext = ''.join(traceback.format_exception(type_, value, tb))", "lexer = get_lexer_by_name(\"pytb\", stripall=True)", "formatter = TerminalFormatter()"], "simple_code": ["tbtext , lexer , formatter  = ''.join(traceback.format_exception(type_, value, tb)), get_lexer_by_name('pytb', stripall=True), TerminalFormatter()", "", ""], "lineno": [[[230, 12], [230, 74]], [[231, 12], [231, 60]], [[232, 12], [232, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/datatypes.py", "cl": "DataLoggingFilter", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.default = default", "self.level = level", "self.dont_include = tuple(dont_include) if dont_include is not None else tuple()"], "simple_code": ["self.default , self.level , self.dont_include  = default, level, tuple(dont_include) if dont_include is not None else tuple()", "", ""], "lineno": [[[290, 8], [290, 30]], [[291, 8], [291, 26]], [[292, 8], [292, 88]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/handler/tensorboard.py", "cl": "TensorboardXHandler", "me": "emit", "idiom": "Assign Multi Targets", "compli_code": ["kwargs = message._replace(tag=message.tag)._asdict()", "fn = {\n                ScalarT: writer.add_scalar,\n                HistogramT: writer.add_histogram,\n                TextT: writer.add_text,\n                EmbeddingT: writer.add_embedding,\n                ImageT: writer.add_image,\n                PRCurveT: writer.add_pr_curve\n            }"], "simple_code": ["kwargs , fn  = message._replace(tag=message.tag)._asdict(), {ScalarT: writer.add_scalar, HistogramT: writer.add_histogram, TextT: writer.add_text, EmbeddingT: writer.add_embedding, ImageT: writer.add_image, PRCurveT: writer.add_pr_curve}", ""], "lineno": [[[76, 12], [76, 64]], [[77, 12], [84, 13]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/handler/tensorboard.py", "cl": "TensorboardXHandler", "me": "emit", "idiom": "Assign Multi Targets", "compli_code": ["writer = SummaryWriter(log_dir=log_dir)", "hparams = getattr(record, \"_tf_hparams\", dict())"], "simple_code": ["writer , hparams  = SummaryWriter(log_dir=log_dir), getattr(record, '_tf_hparams', dict())", ""], "lineno": [[[66, 16], [66, 55]], [[67, 16], [67, 64]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/handler/contextual_file.py", "cl": "ContextualFileHandler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.current_log_dir = \"\"", "self.canonical_name = canonical_name", "self.mode = mode", "self.encoding = encoding", "self.delay = True"], "simple_code": ["self.current_log_dir , self.canonical_name , self.mode , self.encoding , self.delay  = '', canonical_name, mode, encoding, True", "", "", "", ""], "lineno": [[[45, 8], [45, 33]], [[46, 8], [46, 44]], [[47, 8], [47, 24]], [[48, 8], [48, 32]], [[49, 8], [49, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/logging/handler/contextual_file.py", "cl": "ContextualFileHandler", "me": "emit", "idiom": "Assign Multi Targets", "compli_code": ["self.stream = None", "new_path = self.current_log_dir"], "simple_code": ["self.stream , new_path  = None, self.current_log_dir", ""], "lineno": [[[80, 12], [80, 30]], [[81, 12], [81, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/metric.py", "cl": "Metric", "me": "aggregate", "idiom": "Assign Multi Targets", "compli_code": ["state['pred'] = []", "state['target'] = []"], "simple_code": ["state['pred'] , state['target']  = [], []", ""], "lineno": [[[54, 12], [54, 30]], [[55, 12], [55, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/metric.py", "cl": "Metric", "me": "finalize", "idiom": "Assign Multi Targets", "compli_code": ["pred = torch.cat(state['pred'], dim=0)", "target = torch.cat(state['target'], dim=0)"], "simple_code": ["pred , target  = torch.cat(state['pred'], dim=0), torch.cat(state['target'], dim=0)", ""], "lineno": [[[76, 8], [76, 46]], [[77, 8], [77, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/metric.py", "cl": "AverageableMetric", "me": "aggregate", "idiom": "Assign Multi Targets", "compli_code": ["state['accumulated_score'] = 0.", "state['sample_count'] = 0"], "simple_code": ["state['accumulated_score'] , state['sample_count']  = 0.0, 0", ""], "lineno": [[[124, 12], [124, 43]], [[125, 12], [125, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/loss/cross_entropy.py", "cl": "MultiLabelCrossEntropy", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.weight = weight", "self.ignore_index = ignore_index", "self.reduction = reduction"], "simple_code": ["self.weight , self.ignore_index , self.reduction  = weight, ignore_index, reduction", "", ""], "lineno": [[[34, 8], [34, 28]], [[35, 8], [35, 40]], [[36, 8], [36, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/loss/nll_loss.py", "cl": "MultiLabelNLLLoss", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.weight = weight", "self.ignore_index = ignore_index", "self.reduction = reduction"], "simple_code": ["self.weight , self.ignore_index , self.reduction  = weight, ignore_index, reduction", "", ""], "lineno": [[[35, 8], [35, 28]], [[36, 8], [36, 40]], [[37, 8], [37, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/bpc.py", "cl": "BPC", "me": "finalize", "idiom": "Truth Value Test", "compli_code": ["state['sample_count'] == 0"], "simple_code": ["not state['sample_count']"], "lineno": [[[48, 24], [48, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryAccuracy", "me": "compute_binary", "idiom": "Truth Value Test", "compli_code": ["N == 0"], "simple_code": ["not N"], "lineno": [[[102, 11], [102, 17]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryPrecision", "me": "compute_binary", "idiom": "Truth Value Test", "compli_code": ["self.positive_label == 0"], "simple_code": ["not self.positive_label"], "lineno": [[[160, 11], [160, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryPrecision", "me": "compute_binary", "idiom": "Truth Value Test", "compli_code": ["pred.sum() == 0"], "simple_code": ["not pred.sum()"], "lineno": [[[167, 11], [167, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryRecall", "me": "compute_binary", "idiom": "Truth Value Test", "compli_code": ["self.positive_label == 0"], "simple_code": ["not self.positive_label"], "lineno": [[[233, 11], [233, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryRecall", "me": "compute_binary", "idiom": "Truth Value Test", "compli_code": ["target.sum() == 0"], "simple_code": ["not target.sum()"], "lineno": [[[240, 11], [240, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryMetric", "me": "compute", "idiom": "Assign Multi Targets", "compli_code": ["target = target.squeeze().bool()", "pred = (pred > self.threshold)"], "simple_code": ["target , pred  = target.squeeze().bool(), pred > self.threshold", ""], "lineno": [[[44, 8], [44, 40]], [[45, 8], [45, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryAccuracy", "me": "compute_binary", "idiom": "Assign Multi Targets", "compli_code": ["acc = pred == target", "N = target.size()[0] if target.dim() > 0 else 1"], "simple_code": ["acc , N  = pred == target, target.size()[0] if target.dim() > 0 else 1", ""], "lineno": [[[99, 8], [99, 28]], [[100, 8], [100, 55]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryPrecision", "me": "compute_binary", "idiom": "Assign Multi Targets", "compli_code": ["pred = ~pred", "target = ~target"], "simple_code": ["pred , target  = ~pred, ~target", ""], "lineno": [[[161, 12], [161, 24]], [[162, 12], [162, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "BinaryRecall", "me": "compute_binary", "idiom": "Assign Multi Targets", "compli_code": ["pred = ~pred", "target = ~target"], "simple_code": ["pred , target  = ~pred, ~target", ""], "lineno": [[[234, 12], [234, 24]], [[235, 12], [235, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "F1", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.recall = BinaryRecall(threshold, positive_label)", "self.precision = BinaryPrecision(threshold, positive_label)", "self.eps = eps"], "simple_code": ["self.recall , self.precision , self.eps  = BinaryRecall(threshold, positive_label), BinaryPrecision(threshold, positive_label), eps", "", ""], "lineno": [[[277, 8], [277, 61]], [[278, 8], [278, 67]], [[279, 8], [279, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/binary.py", "cl": "F1", "me": "compute_binary", "idiom": "Assign Multi Targets", "compli_code": ["recall = self.recall.compute_binary(pred, target)", "precision = self.precision.compute_binary(pred, target)"], "simple_code": ["recall , precision  = self.recall.compute_binary(pred, target), self.precision.compute_binary(pred, target)", ""], "lineno": [[[301, 8], [301, 57]], [[302, 8], [302, 63]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/auc.py", "cl": "AUC", "me": "compute", "idiom": "Assign Multi Targets", "compli_code": ["scores = np.array(pred)", "targets = np.array(target)"], "simple_code": ["scores , targets  = np.array(pred), np.array(target)", ""], "lineno": [[[59, 8], [59, 31]], [[60, 8], [60, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/perplexity.py", "cl": "Perplexity", "me": "finalize", "idiom": "Truth Value Test", "compli_code": ["state['sample_count'] == 0"], "simple_code": ["not state['sample_count']"], "lineno": [[[72, 24], [72, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/metric/dev/perplexity.py", "cl": "Perplexity", "me": "aggregate", "idiom": "Assign Multi Targets", "compli_code": ["state['accumulated_score'] = 0.", "state['sample_count'] = 0"], "simple_code": ["state['accumulated_score'] , state['sample_count']  = 0.0, 0", ""], "lineno": [[[51, 12], [51, 43]], [[52, 12], [52, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Truth Value Test", "compli_code": ["len(state) == 0"], "simple_code": ["not len(state)"], "lineno": [[[71, 19], [71, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Truth Value Test", "compli_code": ["group['weight_decay'] != 0"], "simple_code": ["group['weight_decay']"], "lineno": [[[109, 23], [109, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Truth Value Test", "compli_code": ["group['weight_decay'] != 0"], "simple_code": ["group['weight_decay']"], "lineno": [[[115, 23], [115, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Assign Multi Targets", "compli_code": ["p_data_fp32 = p.data.float()", "state = self.state[p]"], "simple_code": ["p_data_fp32 , state  = p.data.float(), self.state[p]", ""], "lineno": [[[67, 16], [67, 44]], [[69, 16], [69, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Assign Multi Targets", "compli_code": ["state['step'] = 0", "state['exp_avg'] = torch.zeros_like(p_data_fp32)", "state['exp_avg_sq'] = torch.zeros_like(p_data_fp32)"], "simple_code": ["state['step'] , state['exp_avg'] , state['exp_avg_sq']  = 0, torch.zeros_like(p_data_fp32), torch.zeros_like(p_data_fp32)", "", ""], "lineno": [[[72, 20], [72, 37]], [[73, 20], [73, 68]], [[74, 20], [74, 71]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Assign Multi Targets", "compli_code": ["buffered[0] = state['step']", "beta2_t = beta2 ** state['step']", "N_sma_max = 2 / (1 - beta2) - 1"], "simple_code": ["buffered[0] , beta2_t , N_sma_max  = state['step'], beta2 ** state['step'], 2 / (1 - beta2) - 1", "", ""], "lineno": [[[90, 20], [90, 47]], [[91, 20], [91, 52]], [[92, 20], [92, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/radam.py", "cl": "RAdam", "me": "step", "idiom": "Assign Multi Targets", "compli_code": ["term1 = (1 - beta2_t) * (N_sma - 4) / (N_sma_max - 4)", "term2 = (N_sma - 2) / N_sma * N_sma_max / (N_sma_max - 2)"], "simple_code": ["term1 , term2  = (1 - beta2_t) * (N_sma - 4) / (N_sma_max - 4), (N_sma - 2) / N_sma * N_sma_max / (N_sma_max - 2)", ""], "lineno": [[[98, 24], [98, 77]], [[99, 24], [99, 81]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/linear.py", "cl": "WarmupLinearScheduler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.warmup = warmup", "self.n_steps = n_steps"], "simple_code": ["self.warmup , self.n_steps  = warmup, n_steps", ""], "lineno": [[[32, 8], [32, 28]], [[33, 8], [33, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/noam.py", "cl": "NoamScheduler", "me": "lr_lambda", "idiom": "Chain Compare", "compli_code": ["step == 0 and self.warmup == 0"], "simple_code": ["step == 0 == self.warmup"], "lineno": [[[50, 11], [50, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/noam.py", "cl": "NoamScheduler", "me": "lr_lambda", "idiom": "Truth Value Test", "compli_code": ["step == 0"], "simple_code": ["not step"], "lineno": [[[50, 11], [50, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/noam.py", "cl": "NoamScheduler", "me": "lr_lambda", "idiom": "Truth Value Test", "compli_code": ["self.warmup == 0"], "simple_code": ["not self.warmup"], "lineno": [[[50, 25], [50, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/optim/noam.py", "cl": "NoamScheduler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.warmup = warmup", "self.d_model = d_model"], "simple_code": ["self.warmup , self.d_model  = warmup, d_model", ""], "lineno": [[[31, 8], [31, 28]], [[32, 8], [32, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/episodic.py", "cl": "EpisodicSampler", "me": "sample", "idiom": "Truth Value Test", "compli_code": ["len(data) == 0"], "simple_code": ["not len(data)"], "lineno": [[[77, 11], [77, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/episodic.py", "cl": "EpisodicSampler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.pad = pad_index", "self.n_support = n_support", "self.n_query = n_query", "self.n_classes = n_classes", "self.n_episodes = n_episodes", "self.balance_query = balance_query"], "simple_code": ["self.pad , self.n_support , self.n_query , self.n_classes , self.n_episodes , self.balance_query  = pad_index, n_support, n_query, n_classes, n_episodes, balance_query", "", "", "", "", ""], "lineno": [[[46, 8], [46, 28]], [[48, 8], [48, 34]], [[49, 8], [49, 30]], [[50, 8], [50, 34]], [[51, 8], [51, 36]], [[53, 8], [53, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/episodic.py", "cl": "EpisodicSampler", "me": "sample", "idiom": "Assign Multi Targets", "compli_code": ["query_source = pad_sequence(query_source,\n                                            batch_first=True,\n                                            padding_value=self.pad)", "query_target = torch.tensor(query_target)", "support_source = pad_sequence(support_source,\n                                              batch_first=True,\n                                              padding_value=self.pad)", "support_target = torch.tensor(support_target)"], "simple_code": ["query_source , query_target , support_source , support_target  = pad_sequence(query_source, batch_first=True, padding_value=self.pad), torch.tensor(query_target), pad_sequence(support_source, batch_first=True, padding_value=self.pad), torch.tensor(support_target)", "", "", ""], "lineno": [[[114, 16], [116, 67]], [[117, 16], [117, 57]], [[119, 16], [121, 69]], [[122, 16], [122, 61]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "BaseSampler", "me": "__init__", "idiom": "Chain Compare", "compli_code": ["downsample is not None and downsample_max_samples is not None"], "simple_code": ["downsample is not None is not downsample_max_samples"], "lineno": [[[249, 11], [249, 72]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "BaseSampler", "me": "sample", "idiom": "Chain Compare", "compli_code": ["self.downsample_max_samples is not None and self.downsample_max_samples >= len(data)"], "simple_code": ["None is not self.downsample_max_samples >= len(data)"], "lineno": [[[280, 15], [280, 99]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "", "me": "_bfs", "idiom": "Truth Value Test", "compli_code": ["c.dim() == 0"], "simple_code": ["not c.dim()"], "lineno": [[[52, 15], [52, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "BaseSampler", "me": "sample", "idiom": "Truth Value Test", "compli_code": ["len(data) == 0"], "simple_code": ["not len(data)"], "lineno": [[[276, 11], [276, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "", "me": "_bfs", "idiom": "Assign Multi Targets", "compli_code": ["queue = [(path, level, root)]", "paths = set()"], "simple_code": ["queue , paths  = [(path, level, root)], set()", ""], "lineno": [[[45, 4], [45, 33]], [[46, 4], [46, 17]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "BaseSampler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.pad = pad_index", "self.batch_size = batch_size", "self.shuffle = shuffle", "self.drop_last = drop_last", "self.n_workers = n_workers", "self.pin_memory = pin_memory"], "simple_code": ["self.pad , self.batch_size , self.shuffle , self.drop_last , self.n_workers , self.pin_memory  = pad_index, batch_size, shuffle, drop_last, n_workers, pin_memory", "", "", "", "", ""], "lineno": [[[241, 8], [241, 28]], [[242, 8], [242, 36]], [[243, 8], [243, 30]], [[244, 8], [244, 34]], [[245, 8], [245, 34]], [[246, 8], [246, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/sampler/base.py", "cl": "BaseSampler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.downsample = downsample", "self.downsample_max_samples = downsample_max_samples", "self.downsample_seed = downsample_seed", "self.random_generator = np.random if seed is None else np.random.RandomState(seed)"], "simple_code": ["self.downsample , self.downsample_max_samples , self.downsample_seed , self.random_generator  = downsample, downsample_max_samples, downsample_seed, np.random if seed is None else np.random.RandomState(seed)", "", "", ""], "lineno": [[[252, 8], [252, 36]], [[253, 8], [253, 60]], [[254, 8], [254, 46]], [[255, 8], [255, 90]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/progress.py", "cl": "ProgressState", "me": "__init__", "idiom": "Dict Comprehension", "compli_code": ["self.block_state = {}", "for b in dependency_dag.keys():\n            self.block_state[b] = 0"], "simple_code": ["", "self.block_state = {b: 0 for b in dependency_dag.keys()}"], "lineno": [[[29, 8], [29, 29]], [[30, 8], [31, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/progress.py", "cl": "ProgressState", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.fname = \"state.pkl\"", "self.config = config", "self.name = name", "self.save_path = save_path", "self.total = len(dependency_dag)", "self.done = 0", "self.factories_num = factories_num", "self.block_state = {}"], "simple_code": ["self.fname , self.config , self.name , self.save_path , self.total , self.done , self.factories_num , self.block_state  = 'state.pkl', config, name, save_path, len(dependency_dag), 0, factories_num, {}", "", "", "", "", "", "", ""], "lineno": [[[10, 8], [10, 32]], [[12, 8], [12, 28]], [[14, 8], [14, 24]], [[15, 8], [15, 34]], [[16, 8], [16, 40]], [[18, 8], [18, 21]], [[22, 8], [22, 42]], [[29, 8], [29, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/progress.py", "cl": "ProgressState", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.time_lapses = {}", "self.variants = {}", "self.finished = False", "self.prev_time = None", "self.dependency_dag = dependency_dag"], "simple_code": ["self.time_lapses , self.variants , self.finished , self.prev_time , self.dependency_dag  = {}, {}, False, None, dependency_dag", "", "", "", ""], "lineno": [[[33, 8], [33, 29]], [[35, 8], [35, 26]], [[37, 8], [37, 29]], [[39, 8], [39, 29]], [[41, 8], [41, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/progress.py", "cl": "ProgressState", "me": "checkpoint_start", "idiom": "Assign Multi Targets", "compli_code": ["self.prev_time = time.time()", "self.block_state[block_id] = 1"], "simple_code": ["self.prev_time , self.block_state[block_id]  = time.time(), 1", ""], "lineno": [[[46, 8], [46, 36]], [[47, 8], [47, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/progress.py", "cl": "ProgressState", "me": "refresh", "idiom": "Assign Multi Targets", "compli_code": ["v = v[:v.find(\"-\") - 5]", "hparams = {}"], "simple_code": ["v , hparams  = v[:v.find('-') - 5], {}", ""], "lineno": [[[65, 24], [65, 47]], [[66, 24], [66, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/progress.py", "cl": "ProgressState", "me": "checkpoint_end", "idiom": "Assign Multi Targets", "compli_code": ["self.time_lapses[block_id] = curr_time - self.prev_time", "self.prev_time = None"], "simple_code": ["self.time_lapses[block_id] , self.prev_time  = curr_time - self.prev_time, None", ""], "lineno": [[[76, 12], [76, 67]], [[77, 12], [77, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "get_default_devices", "idiom": "Chain Compare", "compli_code": ["num_gpus > 0 and default_gpus > num_gpus"], "simple_code": ["default_gpus > num_gpus > 0"], "lineno": [[[599, 7], [599, 47]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "extract_needed_blocks", "idiom": "Assign Multi Targets", "compli_code": ["needed = set()", "this_block = schemas[block_id]"], "simple_code": ["needed , this_block  = set(), schemas[block_id]", ""], "lineno": [[[395, 4], [395, 18]], [[396, 4], [396, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "update_link_refs", "idiom": "Assign Multi Targets", "compli_code": ["value.target = global_vars[value.root_schema]", "value.local = False"], "simple_code": ["value.target , value.local  = global_vars[value.root_schema], False", ""], "lineno": [[[442, 16], [442, 61]], [[443, 16], [443, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "get_non_remote_config", "idiom": "Assign Multi Targets", "compli_code": ["new_experiment = copy.deepcopy(experiment)", "experiment.manager = None"], "simple_code": ["new_experiment , experiment.manager  = copy.deepcopy(experiment), None", ""], "lineno": [[[481, 4], [481, 46]], [[483, 4], [483, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "get_default_devices", "idiom": "Assign Multi Targets", "compli_code": ["num_cpus = max(cluster_devices.get('CPU', 0), cluster_devices.get('cpu', 0))", "num_gpus = max(cluster_devices.get('GPU', 0), cluster_devices.get('gpu', 0))"], "simple_code": ["num_cpus , num_gpus  = max(cluster_devices.get('CPU', 0), cluster_devices.get('cpu', 0)), max(cluster_devices.get('GPU', 0), cluster_devices.get('gpu', 0))", ""], "lineno": [[[586, 8], [586, 84]], [[587, 8], [587, 84]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "get_default_devices", "idiom": "Assign Multi Targets", "compli_code": ["num_cpus = os.cpu_count()", "num_gpus = torch.cuda.device_count()"], "simple_code": ["num_cpus , num_gpus  = os.cpu_count(), torch.cuda.device_count()", ""], "lineno": [[[589, 8], [589, 33]], [[590, 8], [590, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/utils.py", "cl": "", "me": "get_default_devices", "idiom": "Assign Multi Targets", "compli_code": ["num_cpus = os.cpu_count()", "num_gpus = 0"], "simple_code": ["num_cpus , num_gpus  = os.cpu_count(), 0", ""], "lineno": [[[592, 8], [592, 33]], [[593, 8], [593, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "__init__", "idiom": "Truth Value Test", "compli_code": ["len(save_path) == 0"], "simple_code": ["not len(save_path)"], "lineno": [[[116, 32], [116, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "parse", "idiom": "Truth Value Test", "compli_code": ["len(self.name) == 0"], "simple_code": ["not len(self.name)"], "lineno": [[[615, 32], [615, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.name = name", "self.original_save_path = save_path"], "simple_code": ["self.name , self.original_save_path  = name, save_path", ""], "lineno": [[[112, 8], [112, 24]], [[114, 8], [114, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.full_save_path = os.path.join(\n            save_path,\n            self.output_folder_name\n        )", "self.resume = resume", "self.devices = devices", "self.resources = resources or dict()", "self.pipeline = pipeline", "self.search = search or dict()"], "simple_code": ["self.full_save_path , self.resume , self.devices , self.resources , self.pipeline , self.search  = os.path.join(save_path, self.output_folder_name), resume, devices, resources or dict(), pipeline, search or dict()", "", "", "", "", ""], "lineno": [[[129, 8], [132, 9]], [[134, 8], [134, 28]], [[135, 8], [135, 30]], [[136, 8], [136, 44]], [[137, 8], [137, 32]], [[139, 8], [139, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.reduce = reduce or dict()", "self.max_failures = max_failures", "self.stop_on_failure = stop_on_failure", "self.merge_plot = merge_plot"], "simple_code": ["self.reduce , self.max_failures , self.stop_on_failure , self.merge_plot  = reduce or dict(), max_failures, stop_on_failure, merge_plot", "", "", ""], "lineno": [[[148, 8], [148, 38]], [[149, 8], [149, 40]], [[150, 8], [150, 46]], [[151, 8], [151, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["trial_name_creator = ray.tune.function(trial_name_creator)", "dependency_dag = {}"], "simple_code": ["trial_name_creator , dependency_dag  = ray.tune.function(trial_name_creator), {}", ""], "lineno": [[[308, 8], [308, 66]], [[311, 8], [311, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["schemas[block_id] = schema_block", "success[block_id] = True"], "simple_code": ["schemas[block_id] , success[block_id]  = schema_block, True", ""], "lineno": [[[334, 12], [334, 44]], [[335, 12], [335, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["relevant_schemas = {k: v for k, v in deepcopy(schemas).items() if k in relevant_ids}", "resume = False if to_resume is None else (block_id in to_resume)"], "simple_code": ["relevant_schemas , resume  = {k: v for (k, v) in deepcopy(schemas).items() if k in relevant_ids}, False if to_resume is None else block_id in to_resume", ""], "lineno": [[[339, 12], [339, 96]], [[342, 12], [342, 76]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["divided_dict_tune = [utils.convert_tune(x) for x in divided_dict]", "tune_experiments = []"], "simple_code": ["divided_dict_tune , tune_experiments  = [utils.convert_tune(x) for x in divided_dict], []", ""], "lineno": [[[354, 16], [354, 81]], [[356, 16], [356, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["paths = [t._checkpoint.value for t in trials]", "mask = [True] * len(trials)"], "simple_code": ["paths , mask  = [t._checkpoint.value for t in trials], [True] * len(trials)", ""], "lineno": [[[420, 16], [420, 61]], [[423, 16], [423, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["trial_checkpoints = {t_hash: path for t_hash, path in zip(hashes, paths)}", "trial_mask = {t_hash: mask_value for t_hash, mask_value in zip(hashes, mask)}"], "simple_code": ["trial_checkpoints , trial_mask  = {t_hash: path for (t_hash, path) in zip(hashes, paths)}, {t_hash: mask_value for (t_hash, mask_value) in zip(hashes, mask)}", ""], "lineno": [[[439, 16], [439, 89]], [[440, 16], [440, 93]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["config = {'name': block_id,\n                              'merge_plot': self.merge_plot,\n                              'params': param_dict,\n                              'schemas': Schema.serialize(schemas_dict),\n                              'checkpoints': checkpoints,\n                              'to_run': block_id,\n                              'global_vars': resources,\n                              'verbose': verbose,\n                              'custom_modules': list(self.extensions.keys()),\n                              'debug': debug}", "tune_loggers = list(filter(lambda l: l != tf2_compat_logger and  # noqa: E741\n                                               not issubclass(l, TFLogger), DEFAULT_LOGGERS))"], "simple_code": ["config , tune_loggers  = {'name': block_id, 'merge_plot': self.merge_plot, 'params': param_dict, 'schemas': Schema.serialize(schemas_dict), 'checkpoints': checkpoints, 'to_run': block_id, 'global_vars': resources, 'verbose': verbose, 'custom_modules': list(self.extensions.keys()), 'debug': debug}, list(filter(lambda l: l != tf2_compat_logger and (not issubclass(l, TFLogger)), DEFAULT_LOGGERS))", ""], "lineno": [[[358, 20], [367, 45]], [[370, 20], [371, 93]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/experiment.py", "cl": "Experiment", "me": "run", "idiom": "Assign Multi Targets", "compli_code": ["success[block_id] = False", "any_error = True"], "simple_code": ["success[block_id] , any_error  = False, True", ""], "lineno": [[[398, 24], [398, 49]], [[399, 24], [399, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/wording.py", "cl": "", "me": "print_useful_remote_info", "idiom": "Truth Value Test", "compli_code": ["manager.factories_timeout == 0"], "simple_code": ["not manager.factories_timeout"], "lineno": [[[58, 9], [58, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/wording.py", "cl": "", "me": "print_useful_remote_info", "idiom": "Truth Value Test", "compli_code": ["manager.orchestrator_timeout == 0"], "simple_code": ["not manager.orchestrator_timeout"], "lineno": [[[67, 9], [67, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/options.py", "cl": "SampledUniformSearchOptions", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self._low = low", "self._high = high", "self._k = k", "self._decimals = decimals"], "simple_code": ["self._low , self._high , self._k , self._decimals  = low, high, k, decimals", "", "", ""], "lineno": [[[108, 8], [108, 23]], [[109, 8], [109, 25]], [[110, 8], [110, 19]], [[111, 8], [111, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/tune_adapter.py", "cl": "TuneAdapter", "me": "_setup", "idiom": "Assign Multi Targets", "compli_code": ["self.name = config['name']", "self.run_flag = True", "custom_modules = config['custom_modules']"], "simple_code": ["self.name , self.run_flag , custom_modules  = config['name'], True, config['custom_modules']", "", ""], "lineno": [[[24, 8], [24, 34]], [[25, 8], [25, 28]], [[26, 8], [26, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/tune_adapter.py", "cl": "TuneAdapter", "me": "_setup", "idiom": "Assign Multi Targets", "compli_code": ["schemas_copy = deepcopy(schemas)", "global_vars = config['global_vars']", "self.verbose = config['verbose']", "self.hyper_params = config['hyper_params']", "self.debug = config['debug']"], "simple_code": ["schemas_copy , global_vars , self.verbose , self.hyper_params , self.debug  = deepcopy(schemas), config['global_vars'], config['verbose'], config['hyper_params'], config['debug']", "", "", "", ""], "lineno": [[[34, 8], [34, 40]], [[35, 8], [35, 43]], [[36, 8], [36, 40]], [[37, 8], [37, 50]], [[38, 8], [38, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/tune_adapter.py", "cl": "TuneAdapter", "me": "save", "idiom": "Assign Multi Targets", "compli_code": ["checkpoint = self._save(checkpoint_dir)", "saved_as_dict = False"], "simple_code": ["checkpoint , saved_as_dict  = self._save(checkpoint_dir), False", ""], "lineno": [[[98, 8], [98, 47]], [[99, 8], [99, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/tune_adapter.py", "cl": "TuneAdapter", "me": "save", "idiom": "Assign Multi Targets", "compli_code": ["saved_as_dict = True", "checkpoint_path = os.path.join(checkpoint_dir, \"checkpoint\")"], "simple_code": ["saved_as_dict , checkpoint_path  = True, os.path.join(checkpoint_dir, 'checkpoint')", ""], "lineno": [[[112, 12], [112, 32]], [[113, 12], [113, 72]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/tune_adapter.py", "cl": "TuneAdapter", "me": "_train", "idiom": "Assign Multi Targets", "compli_code": ["done = not self.block.run()", "metric = self.block.metric()"], "simple_code": ["done , metric  = not self.block.run(), self.block.metric()", ""], "lineno": [[[143, 12], [143, 39]], [[144, 12], [144, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/webapp/app.py", "cl": "", "me": "analyze_download_params", "idiom": "Assign Multi Targets", "compli_code": ["output_dir = app.config.get('output_dir')", "output_name = \"experiment\""], "simple_code": ["output_dir , output_name  = app.config.get('output_dir'), 'experiment'", ""], "lineno": [[[46, 4], [46, 45]], [[47, 4], [47, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/webapp/app.py", "cl": "", "me": "analyze_download_params", "idiom": "Assign Multi Targets", "compli_code": ["output_dir = os.path.join(output_dir, block)", "output_name = f\"{output_name}-{block}\""], "simple_code": ["output_dir , output_name  = os.path.join(output_dir, block), f'{output_name}-{block}'", ""], "lineno": [[[50, 8], [50, 52]], [[51, 8], [51, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/webapp/app.py", "cl": "", "me": "analyze_download_params", "idiom": "Assign Multi Targets", "compli_code": ["output_dir = os.path.join(output_dir, v)", "output_name = f\"{output_name}-{variant}\""], "simple_code": ["output_dir , output_name  = os.path.join(output_dir, v), f'{output_name}-{variant}'", ""], "lineno": [[[57, 20], [57, 60]], [[58, 20], [58, 60]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/webapp/app.py", "cl": "", "me": "stream", "idiom": "Assign Multi Targets", "compli_code": ["content = f.read()", "p = f.tell()"], "simple_code": ["content , p  = f.read(), f.tell()", ""], "lineno": [[[108, 16], [108, 34]], [[109, 16], [109, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/webapp/app.py", "cl": "", "me": "generate", "idiom": "Assign Multi Targets", "compli_code": ["content = f.read()", "p = f.tell()"], "simple_code": ["content , p  = f.read(), f.tell()", ""], "lineno": [[[108, 16], [108, 34]], [[109, 16], [109, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/experiment/webapp/app.py", "cl": "", "me": "index", "idiom": "Assign Multi Targets", "compli_code": ["state = load_state()", "tensorboard_url = app.config.get('tensorboard_url')", "output_log = app.config.get('output_log')", "output_dir = app.config.get('output_dir')"], "simple_code": ["state , tensorboard_url , output_log , output_dir  = load_state(), app.config.get('tensorboard_url'), app.config.get('output_log'), app.config.get('output_dir')", "", "", ""], "lineno": [[[140, 4], [140, 24]], [[141, 4], [141, 55]], [[142, 4], [142, 45]], [[143, 4], [143, 45]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/model.py", "cl": "LanguageModel", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.embedder = embedder", "self.output_layer = output_layer", "self.drop = nn.Dropout(dropout)", "self.pad_index = pad_index", "self.tie_weights = tie_weights"], "simple_code": ["self.embedder , self.output_layer , self.drop , self.pad_index , self.tie_weights  = embedder, output_layer, nn.Dropout(dropout), pad_index, tie_weights", "", "", "", ""], "lineno": [[[53, 8], [53, 32]], [[54, 8], [54, 40]], [[55, 8], [55, 39]], [[57, 8], [57, 34]], [[58, 8], [58, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/model.py", "cl": "LanguageModel", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["flat_targets = target.contiguous().view(-1)[flat_mask]", "flat_pred = self.output_layer(self.drop(flat_encodings))"], "simple_code": ["flat_targets , flat_pred  = target.contiguous().view(-1)[flat_mask], self.output_layer(self.drop(flat_encodings))", ""], "lineno": [[[95, 12], [95, 66]], [[96, 12], [96, 68]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/sampler.py", "cl": "CorpusSampler", "me": "sample", "idiom": "Truth Value Test", "compli_code": ["len(data) == 0"], "simple_code": ["not len(data)"], "lineno": [[[95, 11], [95, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/sampler.py", "cl": "CorpusSampler", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.unroll_size = unroll_size", "self.batch_size = batch_size", "self.drop_last = drop_last", "self.n_workers = n_workers", "self.pin_memory = pin_memory", "self.downsample = downsample"], "simple_code": ["self.unroll_size , self.batch_size , self.drop_last , self.n_workers , self.pin_memory , self.downsample  = unroll_size, batch_size, drop_last, n_workers, pin_memory, downsample", "", "", "", "", ""], "lineno": [[[51, 8], [51, 38]], [[52, 8], [52, 36]], [[53, 8], [53, 34]], [[54, 8], [54, 34]], [[55, 8], [55, 36]], [[56, 8], [56, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/sampler.py", "cl": "CorpusSampler", "me": "sample", "idiom": "Assign Multi Targets", "compli_code": ["x = torch.reshape(tensor[:final_length], (self.batch_size, -1)).t()", "y = torch.reshape(tensor[1:final_length + 1], (self.batch_size, -1)).t()"], "simple_code": ["x , y  = torch.reshape(tensor[:final_length], (self.batch_size, -1)).t(), torch.reshape(tensor[1:final_length + 1], (self.batch_size, -1)).t()", ""], "lineno": [[[109, 8], [109, 75]], [[110, 8], [110, 80]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "Wiki103", "me": "_process", "idiom": "Chain Compare", "compli_code": ["line_strip[0] != '=' and line_strip[-1] != '='"], "simple_code": ["line_strip[0] != '=' != line_strip[-1]"], "lineno": [[[133, 23], [133, 69]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "PTBDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.split_by_line = split_by_line", "self.eol = end_of_line_token"], "simple_code": ["self.split_by_line , self.eol  = split_by_line, end_of_line_token", ""], "lineno": [[[32, 8], [32, 42]], [[33, 8], [33, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "PTBDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["train = self._process(requests.get(train_path).content)", "val = self._process(requests.get(val_path).content)", "test = self._process(requests.get(test_path).content)"], "simple_code": ["train , val , test  = self._process(requests.get(train_path).content), self._process(requests.get(val_path).content), self._process(requests.get(test_path).content)", "", ""], "lineno": [[[39, 8], [39, 63]], [[40, 8], [40, 59]], [[41, 8], [41, 61]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "Wiki103", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.split_by_line = split_by_line", "self.eol = end_of_line_token", "self.remove_headers = remove_headers"], "simple_code": ["self.split_by_line , self.eol , self.remove_headers  = split_by_line, end_of_line_token, remove_headers", "", ""], "lineno": [[[98, 8], [98, 42]], [[99, 8], [99, 36]], [[100, 8], [100, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "Wiki103", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["train = self._process(z.read('wikitext-103/wiki.train.tokens'))", "val = self._process(z.read('wikitext-103/wiki.valid.tokens'))", "test = self._process(z.read('wikitext-103/wiki.test.tokens'))"], "simple_code": ["train , val , test  = self._process(z.read('wikitext-103/wiki.train.tokens')), self._process(z.read('wikitext-103/wiki.valid.tokens')), self._process(z.read('wikitext-103/wiki.test.tokens'))", "", ""], "lineno": [[[103, 12], [103, 75]], [[104, 12], [104, 73]], [[105, 12], [105, 73]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "Enwiki8", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.num_eval_symbols = num_eval_symbols", "self.remove_end_of_line = remove_end_of_line"], "simple_code": ["self.num_eval_symbols , self.remove_end_of_line  = num_eval_symbols, remove_end_of_line", ""], "lineno": [[[169, 8], [169, 48]], [[170, 8], [170, 52]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "Enwiki8", "me": "_process", "idiom": "Assign Multi Targets", "compli_code": ["train_data = file[: -2 * self.num_eval_symbols]", "val_data = file[-2 * self.num_eval_symbols: -self.num_eval_symbols]", "test_data = file[-self.num_eval_symbols:]", "symbol = '' if self.remove_end_of_line else str(ord('\\n'))"], "simple_code": ["train_data , val_data , test_data , symbol  = file[:-2 * self.num_eval_symbols], file[-2 * self.num_eval_symbols:-self.num_eval_symbols], file[-self.num_eval_symbols:], '' if self.remove_end_of_line else str(ord('\\n'))", "", "", ""], "lineno": [[[192, 8], [192, 55]], [[193, 8], [193, 75]], [[194, 8], [194, 49]], [[196, 8], [196, 66]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/language_modeling/datasets.py", "cl": "Enwiki8", "me": "_process", "idiom": "Assign Multi Targets", "compli_code": ["train = ' '.join([str(c) if c != ord('\\n') else symbol for c in train_data])", "val = ' '.join([str(c) if c != ord('\\n') else symbol for c in val_data])", "test = ' '.join([str(c) if c != ord('\\n') else symbol for c in test_data])"], "simple_code": ["train , val , test  = ' '.join([str(c) if c != ord('\\n') else symbol for c in train_data]), ' '.join([str(c) if c != ord('\\n') else symbol for c in val_data]), ' '.join([str(c) if c != ord('\\n') else symbol for c in test_data])", "", ""], "lineno": [[[197, 8], [197, 84]], [[198, 8], [198, 80]], [[199, 8], [199, 82]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/transformers/model.py", "cl": "PretrainedTransformerEmbedder", "me": "forward", "idiom": "Chain Compare", "compli_code": ["attention_mask is None and self.padding_idx is not None"], "simple_code": ["attention_mask is None is not self.padding_idx"], "lineno": [[[93, 11], [93, 66]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/transformers/model.py", "cl": "PretrainedTransformerEmbedder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.config = embedder.config", "self._embedder = embedder", "self.padding_idx = padding_idx", "self.pool = pool"], "simple_code": ["self.config , self._embedder , self.padding_idx , self.pool  = embedder.config, embedder, padding_idx, pool", "", "", ""], "lineno": [[[47, 8], [47, 37]], [[48, 8], [48, 33]], [[49, 8], [49, 38]], [[50, 8], [50, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/transformers/field.py", "cl": "PretrainedTransformerField", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self._tokenizer = AutoTokenizer.from_pretrained(alias, cache_dir=cache_dir, **kwargs)", "self.max_len_truncate = max_len_truncate", "self.add_special_tokens = add_special_tokens"], "simple_code": ["self._tokenizer , self.max_len_truncate , self.add_special_tokens  = AutoTokenizer.from_pretrained(alias, cache_dir=cache_dir, **kwargs), max_len_truncate, add_special_tokens", "", ""], "lineno": [[[40, 8], [40, 93]], [[41, 8], [41, 48]], [[42, 8], [42, 52]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/classification/model.py", "cl": "TextClassifier", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.embedder = embedder", "self.output_layer = output_layer", "self.drop = nn.Dropout(dropout)"], "simple_code": ["self.embedder , self.output_layer , self.drop  = embedder, output_layer, nn.Dropout(dropout)", "", ""], "lineno": [[[50, 8], [50, 32]], [[51, 8], [51, 40]], [[53, 8], [53, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/classification/datasets.py", "cl": "SSTDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["binary_str = 'binary' if binary else 'fine'", "phrases_str = '.phrases' if phrases else ''"], "simple_code": ["binary_str , phrases_str  = 'binary' if binary else 'fine', '.phrases' if phrases else ''", ""], "lineno": [[[28, 8], [28, 51]], [[29, 8], [29, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/classification/datasets.py", "cl": "SSTDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["train_path = self.URL + f\"stsa.{binary_str}{phrases_str}.train\"", "dev_path = self.URL + f\"stsa.{binary_str}.dev\"", "test_path = self.URL + f\"stsa.{binary_str}.test\""], "simple_code": ["train_path , dev_path , test_path  = self.URL + f'stsa.{binary_str}{phrases_str}.train', self.URL + f'stsa.{binary_str}.dev', self.URL + f'stsa.{binary_str}.test'", "", ""], "lineno": [[[31, 8], [31, 71]], [[32, 8], [32, 54]], [[33, 8], [33, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/classification/datasets.py", "cl": "TRECDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["train_path = self.URL + \"TREC.train.all\"", "test_path = self.URL + \"TREC.test.all\""], "simple_code": ["train_path , test_path  = self.URL + 'TREC.train.all', self.URL + 'TREC.test.all'", ""], "lineno": [[[62, 8], [62, 48]], [[63, 8], [63, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/classification/datasets.py", "cl": "NewsGroupDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["train = [(' '.join(d.split()), str(t)) for d, t in zip(train['data'], train['target'])]", "test = [(' '.join(d.split()), str(t)) for d, t in zip(test['data'], test['target'])]", "named_cols = ['text', 'label']"], "simple_code": ["train , test , named_cols  = [(' '.join(d.split()), str(t)) for (d, t) in zip(train['data'], train['target'])], [(' '.join(d.split()), str(t)) for (d, t) in zip(test['data'], test['target'])], ['text', 'label']", "", ""], "lineno": [[[105, 8], [105, 95]], [[106, 8], [106, 92]], [[108, 8], [108, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/fewshot/model.py", "cl": "PrototypicalTextClassifier", "me": "forward", "idiom": "Chain Compare", "compli_code": ["support is not None and support_label is not None"], "simple_code": ["support is not None is not support_label"], "lineno": [[[109, 13], [109, 62]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/fewshot/model.py", "cl": "PrototypicalTextClassifier", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.embedder = embedder", "self.distance_module = get_distance_module(distance)", "self.mean_module = get_mean_module(distance)", "self.detach_mean = detach_mean"], "simple_code": ["self.embedder , self.distance_module , self.mean_module , self.detach_mean  = embedder, get_distance_module(distance), get_mean_module(distance), detach_mean", "", "", ""], "lineno": [[[47, 8], [47, 32]], [[49, 8], [49, 60]], [[50, 8], [50, 52]], [[51, 8], [51, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/fewshot/model.py", "cl": "PrototypicalTextClassifier", "me": "compute_prototypes", "idiom": "Assign Multi Targets", "compli_code": ["means = []", "n_means = len(means_dict)"], "simple_code": ["means , n_means  = [], len(means_dict)", ""], "lineno": [[[68, 8], [68, 18]], [[69, 8], [69, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nlp/fewshot/model.py", "cl": "PrototypicalTextClassifier", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["support = support.detach()", "support_label = support_label.detach()"], "simple_code": ["support , support_label  = support.detach(), support_label.detach()", ""], "lineno": [[[111, 16], [111, 42]], [[112, 16], [112, 54]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/runnable/context.py", "cl": "SafeExecutionContext", "me": "__exit__", "idiom": "Chain Compare", "compli_code": ["exc_type is not None and exc_value is not None"], "simple_code": ["exc_type is not None is not exc_value"], "lineno": [[[64, 11], [64, 57]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/runnable/context.py", "cl": "SafeExecutionContext", "me": "check_tags", "idiom": "Assign Multi Targets", "compli_code": ["registered_tags = {t for _, tags in Registrable._yaml_tags.items() for t in tags}", "parsing_events = yaml.parse(content)"], "simple_code": ["registered_tags , parsing_events  = {t for (_, tags) in Registrable._yaml_tags.items() for t in tags}, yaml.parse(content)", ""], "lineno": [[[199, 8], [199, 89]], [[202, 8], [202, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/runnable/environment.py", "cl": "RemoteEnvironment", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.key = key", "self.orchestrator_ip = orchestrator_ip", "self.factories_ips = factories_ips", "self.user = user", "self.local_user = local_user", "self.public_orchestrator_ip = public_orchestrator_ip", "self.public_factories_ips = public_factories_ips"], "simple_code": ["self.key , self.orchestrator_ip , self.factories_ips , self.user , self.local_user , self.public_orchestrator_ip , self.public_factories_ips  = key, orchestrator_ip, factories_ips, user, local_user, public_orchestrator_ip, public_factories_ips", "", "", "", "", "", ""], "lineno": [[[45, 8], [45, 22]], [[46, 8], [46, 46]], [[47, 8], [47, 42]], [[48, 8], [48, 24]], [[49, 8], [49, 36]], [[51, 8], [51, 60]], [[52, 8], [52, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/rnn.py", "cl": "RNNEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.rnn_type = rnn_type", "self.input_size = input_size", "self.hidden_size = hidden_size", "self.enforce_sorted = enforce_sorted", "self.output_size = 2 * hidden_size if bidirectional else hidden_size"], "simple_code": ["self.rnn_type , self.input_size , self.hidden_size , self.enforce_sorted , self.output_size  = rnn_type, input_size, hidden_size, enforce_sorted, 2 * hidden_size if bidirectional else hidden_size", "", "", "", ""], "lineno": [[[82, 8], [82, 32]], [[83, 8], [83, 36]], [[84, 8], [84, 38]], [[85, 8], [85, 44]], [[86, 8], [86, 76]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/rnn.py", "cl": "PooledRNNEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.pooling = pooling", "self.rnn = RNNEncoder(input_size=input_size,\n                              hidden_size=hidden_size,\n                              n_layers=n_layers,\n                              rnn_type=rnn_type,\n                              dropout=dropout,\n                              bidirectional=bidirectional,\n                              layer_norm=layer_norm,\n                              highway_bias=highway_bias,\n                              rescale=rescale)", "self.output_size = 2 * hidden_size if bidirectional else hidden_size"], "simple_code": ["self.pooling , self.rnn , self.output_size  = pooling, RNNEncoder(input_size=input_size, hidden_size=hidden_size, n_layers=n_layers, rnn_type=rnn_type, dropout=dropout, bidirectional=bidirectional, layer_norm=layer_norm, highway_bias=highway_bias, rescale=rescale), 2 * hidden_size if bidirectional else hidden_size", "", ""], "lineno": [[[222, 8], [222, 30]], [[223, 8], [231, 46]], [[232, 8], [232, 76]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embeddings", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.num_embeddings = num_embeddings", "self.embedding_dim = embedding_dim", "self.num_positions = positonal_max_length", "self.token_embedding = nn.Embedding(num_embeddings,\n                                            embedding_dim,\n                                            padding_idx,\n                                            max_norm,\n                                            norm_type,\n                                            scale_grad_by_freq,\n                                            sparse)", "self.pos_embedding = None"], "simple_code": ["self.num_embeddings , self.embedding_dim , self.num_positions , self.token_embedding , self.pos_embedding  = num_embeddings, embedding_dim, positonal_max_length, nn.Embedding(num_embeddings, embedding_dim, padding_idx, max_norm, norm_type, scale_grad_by_freq, sparse), None", "", "", "", ""], "lineno": [[[84, 8], [84, 44]], [[85, 8], [85, 42]], [[86, 8], [86, 49]], [[88, 8], [94, 51]], [[96, 8], [96, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embeddings", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["position = torch.arange(0, positonal_max_length, dtype=torch.float).unsqueeze(1)", "div_term = torch.arange(0, embedding_dim, 2).float()"], "simple_code": ["position , div_term  = torch.arange(0, positonal_max_length, dtype=torch.float).unsqueeze(1), torch.arange(0, embedding_dim, 2).float()", ""], "lineno": [[[105, 12], [105, 92]], [[106, 12], [106, 64]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embeddings", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["div_term = torch.exp(div_term * (-math.log(10000.0) / embedding_dim))", "pos_embedding = torch.zeros(positonal_max_length, embedding_dim)"], "simple_code": ["div_term , pos_embedding  = torch.exp(div_term * (-math.log(10000.0) / embedding_dim)), torch.zeros(positonal_max_length, embedding_dim)", ""], "lineno": [[[107, 12], [107, 81]], [[109, 12], [109, 76]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embeddings", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["pos_embedding[:, 0::2] = torch.sin(position * div_term)", "pos_embedding[:, 1::2] = torch.cos(position * div_term)"], "simple_code": ["pos_embedding[:, 0::2] , pos_embedding[:, 1::2]  = torch.sin(position * div_term), torch.cos(position * div_term)", ""], "lineno": [[[110, 12], [110, 67]], [[111, 12], [111, 67]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embeddings", "me": "from_pretrained", "idiom": "Assign Multi Targets", "compli_code": ["embedding.token_embedding.weight.data = embeddings", "embedding.token_embedding.weight.requires_grad = not freeze"], "simple_code": ["embedding.token_embedding.weight.data , embedding.token_embedding.weight.requires_grad  = embeddings, not freeze", ""], "lineno": [[[195, 8], [195, 58]], [[196, 8], [196, 67]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embeddings", "me": "from_pretrained", "idiom": "Assign Multi Targets", "compli_code": ["embedding.pos_embedding.weight.data = positonal_embeddings", "embedding.pos_embedding.weight.requires_grad = not positonal_freeze"], "simple_code": ["embedding.pos_embedding.weight.data , embedding.pos_embedding.weight.requires_grad  = positonal_embeddings, not positonal_freeze", ""], "lineno": [[[199, 12], [199, 70]], [[200, 12], [200, 79]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embedder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.embedding = embedding", "self.dropout = nn.Dropout(embedding_dropout)", "self.encoder = encoder", "self.pooling = pooling", "self.padding_idx = padding_idx", "self.return_mask = return_mask"], "simple_code": ["self.embedding , self.dropout , self.encoder , self.pooling , self.padding_idx , self.return_mask  = embedding, nn.Dropout(embedding_dropout), encoder, pooling, padding_idx, return_mask", "", "", "", "", ""], "lineno": [[[280, 8], [280, 34]], [[281, 8], [281, 52]], [[282, 8], [282, 30]], [[283, 8], [283, 30]], [[284, 8], [284, 38]], [[285, 8], [285, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/embedding.py", "cl": "Embedder", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["padding_mask = None", "encoding = self.encoder(embedded)"], "simple_code": ["padding_mask , encoding  = None, self.encoder(embedded)", ""], "lineno": [[[316, 12], [316, 31]], [[317, 12], [317, 45]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/mos.py", "cl": "MixtureOfSoftmax", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.pi_w = MLPEncoder(input_size, k)", "self.softmax = nn.Softmax()", "self.layers = [MLPEncoder(input_size, output_size) for _ in range(k)]", "self.tanh = nn.Tanh()", "self.activation = nn.LogSoftmax() if take_log else nn.Softmax()"], "simple_code": ["self.pi_w , self.softmax , self.layers , self.tanh , self.activation  = MLPEncoder(input_size, k), nn.Softmax(), [MLPEncoder(input_size, output_size) for _ in range(k)], nn.Tanh(), nn.LogSoftmax() if take_log else nn.Softmax()", "", "", "", ""], "lineno": [[[41, 8], [41, 45]], [[42, 8], [42, 35]], [[44, 8], [44, 77]], [[45, 8], [45, 29]], [[47, 8], [47, 71]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRU", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.encoder = TransformerSRUEncoder(input_size,\n                                             d_model,\n                                             nhead,\n                                             dim_feedforward,\n                                             num_encoder_layers,\n                                             dropout,\n                                             sru_dropout,\n                                             bidrectional,\n                                             **kwargs)", "self.decoder = TransformerSRUDecoder(input_size,\n                                             d_model,\n                                             nhead,\n                                             dim_feedforward,\n                                             num_encoder_layers,\n                                             dropout,\n                                             sru_dropout,\n                                             **kwargs)"], "simple_code": ["self.encoder , self.decoder  = TransformerSRUEncoder(input_size, d_model, nhead, dim_feedforward, num_encoder_layers, dropout, sru_dropout, bidrectional, **kwargs), TransformerSRUDecoder(input_size, d_model, nhead, dim_feedforward, num_encoder_layers, dropout, sru_dropout, **kwargs)", ""], "lineno": [[[64, 8], [72, 54]], [[74, 8], [81, 54]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.input_size = input_size", "self.d_model = d_model"], "simple_code": ["self.input_size , self.d_model  = input_size, d_model", ""], "lineno": [[[210, 8], [210, 36]], [[211, 8], [211, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.layers = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)])", "self.num_layers = num_layers"], "simple_code": ["self.layers , self.num_layers  = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)]), num_layers", ""], "lineno": [[[223, 8], [223, 86]], [[224, 8], [224, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUDecoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.input_size = input_size", "self.d_model = d_model"], "simple_code": ["self.input_size , self.d_model  = input_size, d_model", ""], "lineno": [[[316, 8], [316, 36]], [[317, 8], [317, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUDecoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.layers = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)])", "self.num_layers = num_layers"], "simple_code": ["self.layers , self.num_layers  = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)]), num_layers", ""], "lineno": [[[328, 8], [328, 86]], [[329, 8], [329, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUDecoder", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["output = tgt.transpose(0, 1)", "state = state or [None] * self.num_layers"], "simple_code": ["output , state  = tgt.transpose(0, 1), state or [None] * self.num_layers", ""], "lineno": [[[369, 8], [369, 36]], [[370, 8], [370, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUEncoderLayer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout)", "self.sru = SRUCell(d_model,\n                           dim_feedforward,\n                           dropout,\n                           sru_dropout or dropout,\n                           bidirectional=bidirectional,\n                           has_skip_term=False, **kwargs)", "self.linear2 = nn.Linear(dim_feedforward, d_model)", "self.norm1 = nn.LayerNorm(d_model)", "self.norm2 = nn.LayerNorm(d_model)", "self.dropout1 = nn.Dropout(dropout)", "self.dropout2 = nn.Dropout(dropout)"], "simple_code": ["self.self_attn , self.sru , self.linear2 , self.norm1 , self.norm2 , self.dropout1 , self.dropout2  = nn.MultiheadAttention(d_model, nhead, dropout=dropout), SRUCell(d_model, dim_feedforward, dropout, sru_dropout or dropout, bidirectional=bidirectional, has_skip_term=False, **kwargs), nn.Linear(dim_feedforward, d_model), nn.LayerNorm(d_model), nn.LayerNorm(d_model), nn.Dropout(dropout), nn.Dropout(dropout)", "", "", "", "", "", ""], "lineno": [[[428, 8], [428, 79]], [[429, 8], [434, 57]], [[436, 8], [436, 58]], [[437, 8], [437, 42]], [[438, 8], [438, 42]], [[439, 8], [439, 43]], [[440, 8], [440, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer_sru.py", "cl": "TransformerSRUDecoderLayer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout)", "self.multihead_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout)", "self.sru = SRUCell(d_model,\n                           dim_feedforward,\n                           dropout,\n                           sru_dropout or dropout,\n                           bidirectional=False,\n                           has_skip_term=False, **kwargs)", "self.linear2 = nn.Linear(dim_feedforward, d_model)", "self.norm1 = nn.LayerNorm(d_model)", "self.norm2 = nn.LayerNorm(d_model)", "self.norm3 = nn.LayerNorm(d_model)", "self.dropout1 = nn.Dropout(dropout)", "self.dropout2 = nn.Dropout(dropout)", "self.dropout3 = nn.Dropout(dropout)"], "simple_code": ["self.self_attn , self.multihead_attn , self.sru , self.linear2 , self.norm1 , self.norm2 , self.norm3 , self.dropout1 , self.dropout2 , self.dropout3  = nn.MultiheadAttention(d_model, nhead, dropout=dropout), nn.MultiheadAttention(d_model, nhead, dropout=dropout), SRUCell(d_model, dim_feedforward, dropout, sru_dropout or dropout, bidirectional=False, has_skip_term=False, **kwargs), nn.Linear(dim_feedforward, d_model), nn.LayerNorm(d_model), nn.LayerNorm(d_model), nn.LayerNorm(d_model), nn.Dropout(dropout), nn.Dropout(dropout), nn.Dropout(dropout)", "", "", "", "", "", "", "", "", ""], "lineno": [[[521, 8], [521, 79]], [[522, 8], [522, 84]], [[523, 8], [528, 57]], [[530, 8], [530, 58]], [[531, 8], [531, 42]], [[532, 8], [532, 42]], [[533, 8], [533, 42]], [[534, 8], [534, 43]], [[535, 8], [535, 43]], [[536, 8], [536, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "Transformer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.encoder = TransformerEncoder(input_size,\n                                          d_model,\n                                          nhead,\n                                          dim_feedforward,\n                                          num_encoder_layers,\n                                          dropout)", "self.decoder = TransformerDecoder(input_size,\n                                          d_model,\n                                          nhead,\n                                          dim_feedforward,\n                                          num_encoder_layers,\n                                          dropout)"], "simple_code": ["self.encoder , self.decoder  = TransformerEncoder(input_size, d_model, nhead, dim_feedforward, num_encoder_layers, dropout), TransformerDecoder(input_size, d_model, nhead, dim_feedforward, num_encoder_layers, dropout)", ""], "lineno": [[[67, 8], [72, 50]], [[74, 8], [79, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "TransformerEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.input_size = input_size", "self.d_model = d_model"], "simple_code": ["self.input_size , self.d_model  = input_size, d_model", ""], "lineno": [[[196, 8], [196, 36]], [[197, 8], [197, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "TransformerEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.layers = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)])", "self.num_layers = num_layers"], "simple_code": ["self.layers , self.num_layers  = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)]), num_layers", ""], "lineno": [[[207, 8], [207, 86]], [[208, 8], [208, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "TransformerDecoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.input_size = input_size", "self.d_model = d_model"], "simple_code": ["self.input_size , self.d_model  = input_size, d_model", ""], "lineno": [[[284, 8], [284, 36]], [[285, 8], [285, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "TransformerDecoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.layers = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)])", "self.num_layers = num_layers"], "simple_code": ["self.layers , self.num_layers  = nn.ModuleList([copy.deepcopy(layer) for _ in range(num_layers)]), num_layers", ""], "lineno": [[[295, 8], [295, 86]], [[296, 8], [296, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "TransformerEncoderLayer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout)", "self.dropout = nn.Dropout(dropout)", "self.linear1 = nn.Linear(d_model, dim_feedforward)", "self.linear2 = nn.Linear(dim_feedforward, d_model)", "self.norm1 = nn.LayerNorm(d_model)", "self.norm2 = nn.LayerNorm(d_model)", "self.dropout1 = nn.Dropout(dropout)", "self.dropout2 = nn.Dropout(dropout)"], "simple_code": ["self.self_attn , self.dropout , self.linear1 , self.linear2 , self.norm1 , self.norm2 , self.dropout1 , self.dropout2  = nn.MultiheadAttention(d_model, nhead, dropout=dropout), nn.Dropout(dropout), nn.Linear(d_model, dim_feedforward), nn.Linear(dim_feedforward, d_model), nn.LayerNorm(d_model), nn.LayerNorm(d_model), nn.Dropout(dropout), nn.Dropout(dropout)", "", "", "", "", "", "", ""], "lineno": [[[385, 8], [385, 79]], [[387, 8], [387, 42]], [[388, 8], [388, 58]], [[389, 8], [389, 58]], [[391, 8], [391, 42]], [[392, 8], [392, 42]], [[393, 8], [393, 43]], [[394, 8], [394, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/transformer.py", "cl": "TransformerDecoderLayer", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.self_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout)", "self.multihead_attn = nn.MultiheadAttention(d_model, nhead, dropout=dropout)", "self.dropout = nn.Dropout(dropout)", "self.linear1 = nn.Linear(d_model, dim_feedforward)", "self.linear2 = nn.Linear(dim_feedforward, d_model)", "self.norm1 = nn.LayerNorm(d_model)", "self.norm2 = nn.LayerNorm(d_model)", "self.norm3 = nn.LayerNorm(d_model)", "self.dropout1 = nn.Dropout(dropout)", "self.dropout2 = nn.Dropout(dropout)", "self.dropout3 = nn.Dropout(dropout)"], "simple_code": ["self.self_attn , self.multihead_attn , self.dropout , self.linear1 , self.linear2 , self.norm1 , self.norm2 , self.norm3 , self.dropout1 , self.dropout2 , self.dropout3  = nn.MultiheadAttention(d_model, nhead, dropout=dropout), nn.MultiheadAttention(d_model, nhead, dropout=dropout), nn.Dropout(dropout), nn.Linear(d_model, dim_feedforward), nn.Linear(dim_feedforward, d_model), nn.LayerNorm(d_model), nn.LayerNorm(d_model), nn.LayerNorm(d_model), nn.Dropout(dropout), nn.Dropout(dropout), nn.Dropout(dropout)", "", "", "", "", "", "", "", "", "", ""], "lineno": [[[471, 8], [471, 79]], [[472, 8], [472, 84]], [[474, 8], [474, 42]], [[475, 8], [475, 58]], [[476, 8], [476, 58]], [[478, 8], [478, 42]], [[479, 8], [479, 42]], [[480, 8], [480, 42]], [[481, 8], [481, 43]], [[482, 8], [482, 43]], [[483, 8], [483, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/cnn.py", "cl": "CNNEncoder", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["activation = activation or nn.ReLU()", "layers = []", "prev_c = input_channels"], "simple_code": ["activation , layers , prev_c  = activation or nn.ReLU(), [], input_channels", "", ""], "lineno": [[[112, 8], [112, 44]], [[114, 8], [114, 19]], [[116, 8], [116, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/pooling.py", "cl": "AvgPooling", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["value_count = padding_mask.sum(dim=1).unsqueeze(1)", "data = _sum_with_padding_mask(data, padding_mask)"], "simple_code": ["value_count , data  = padding_mask.sum(dim=1).unsqueeze(1), _sum_with_padding_mask(data, padding_mask)", ""], "lineno": [[[154, 8], [154, 58]], [[155, 8], [155, 57]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/pooling.py", "cl": "StructuredSelfAttentivePooling", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.in_drop = nn.Dropout(input_dropout) if input_dropout > 0. else nn.Identity()", "dimensions = [input_size, *attention_units, attention_heads]", "layers = []"], "simple_code": ["self.in_drop , dimensions , layers  = nn.Dropout(input_dropout) if input_dropout > 0.0 else nn.Identity(), [input_size, *attention_units, attention_heads], []", "", ""], "lineno": [[[213, 8], [213, 89]], [[216, 8], [216, 68]], [[217, 8], [217, 19]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/pooling.py", "cl": "StructuredSelfAttentivePooling", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.mlp = nn.Sequential(*layers)", "self.output_activation = nn.Softmax(dim=1) \\\n            if output_activation is None else output_activation"], "simple_code": ["self.mlp , self.output_activation  = nn.Sequential(*layers), nn.Softmax(dim=1) if output_activation is None else output_activation", ""], "lineno": [[[228, 8], [228, 41]], [[230, 8], [231, 63]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/pooling.py", "cl": "StructuredSelfAttentivePooling", "me": "__init__", "idiom": "Call Star", "compli_code": ["dimensions[-2], dimensions[-1], bias=False)"], "simple_code": ["*dimensions[-2:0]"], "lineno": [[[223, 32], [223, 62]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/pooling.py", "cl": "StructuredSelfAttentivePooling", "me": "__init__", "idiom": "Call Star", "compli_code": ["dimensions[l], dimensions[l + 1], bias=is_biased)"], "simple_code": ["*dimensions[l:l + 2]"], "lineno": [[[220, 36], [220, 68]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/distance/hyperbolic.py", "cl": "", "me": "arccosh", "idiom": "Assign Multi Targets", "compli_code": ["a = torch.log(x)", "b = torch.log1p(torch.sqrt(x * x - 1) / x)"], "simple_code": ["a , b  = torch.log(x), torch.log1p(torch.sqrt(x * x - 1) / x)", ""], "lineno": [[[14, 4], [14, 20]], [[15, 4], [15, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/distance/hyperbolic.py", "cl": "HyperbolicDistance", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["mat_1_x_0 = torch.sqrt(1 + mat_1.pow(2).sum(dim=1, keepdim=True))", "mat_2_x_0 = torch.sqrt(1 + mat_2.pow(2).sum(dim=1, keepdim=True))"], "simple_code": ["mat_1_x_0 , mat_2_x_0  = torch.sqrt(1 + mat_1.pow(2).sum(dim=1, keepdim=True)), torch.sqrt(1 + mat_2.pow(2).sum(dim=1, keepdim=True))", ""], "lineno": [[[82, 8], [82, 73]], [[83, 8], [83, 73]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/distance/hyperbolic.py", "cl": "HyperbolicDistance", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["left = mat_1_x_0.mm(mat_2_x_0.t())", "right = mat_1[:, 1:].mm(mat_2[:, 1:].t())"], "simple_code": ["left , right  = mat_1_x_0.mm(mat_2_x_0.t()), mat_1[:, 1:].mm(mat_2[:, 1:].t())", ""], "lineno": [[[86, 8], [86, 42]], [[87, 8], [87, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/distance/hyperbolic.py", "cl": "HyperbolicMean", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["n_iter = 5 if self.training else 100", "projected = project(data)"], "simple_code": ["n_iter , projected  = 5 if self.training else 100, project(data)", ""], "lineno": [[[110, 8], [110, 44]], [[113, 8], [113, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/distance/hyperbolic.py", "cl": "HyperbolicMean", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["mean = mean / norm(mean)", "r = 1e-2"], "simple_code": ["mean , r  = mean / norm(mean), 0.01", ""], "lineno": [[[116, 8], [116, 32]], [[118, 8], [118, 16]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/nn/distance/cosine.py", "cl": "CosineDistance", "me": "forward", "idiom": "Assign Multi Targets", "compli_code": ["w1 = mat_1.norm(p=2, dim=1, keepdim=True)", "w2 = mat_2.norm(p=2, dim=1, keepdim=True)"], "simple_code": ["w1 , w2  = mat_1.norm(p=2, dim=1, keepdim=True), mat_2.norm(p=2, dim=1, keepdim=True)", ""], "lineno": [[[42, 8], [42, 49]], [[43, 8], [43, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/dataset/tabular.py", "cl": "TabularDataset", "me": "_load_file", "idiom": "Truth Value Test", "compli_code": ["len(data) == 0"], "simple_code": ["not len(data)"], "lineno": [[[474, 11], [474, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/dataset/tabular.py", "cl": "DataView", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.data = data", "self.transform_hooks = transform_hooks", "self.cache = cache"], "simple_code": ["self.data , self.transform_hooks , self.cache  = data, transform_hooks, cache", "", ""], "lineno": [[[42, 8], [42, 24]], [[43, 8], [43, 46]], [[44, 8], [44, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/dataset/tabular.py", "cl": "TabularDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self._train = np.array(train, dtype=np.object)", "self._val = None", "self._test = None"], "simple_code": ["self._train , self._val , self._test  = np.array(train, dtype=np.object), None, None", "", ""], "lineno": [[[175, 8], [175, 54]], [[176, 8], [176, 24]], [[177, 8], [177, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/dataset/tabular.py", "cl": "TabularDataset", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.cache = cache", "self.named_columns = named_columns", "cols = []"], "simple_code": ["self.cache , self.named_columns , cols  = cache, named_columns, []", "", ""], "lineno": [[[184, 8], [184, 26]], [[186, 8], [186, 42]], [[188, 8], [188, 17]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/flambe/dataset/tabular.py", "cl": "TabularDataset", "me": "_set_transforms", "idiom": "Assign Multi Targets", "compli_code": ["field = value", "columns = k"], "simple_code": ["field , columns  = value, k", ""], "lineno": [[[236, 16], [236, 29]], [[237, 16], [237, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "MockSSHClient", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.status = status", "self.success_msg = success_msg", "self.error_msg = error_msg"], "simple_code": ["self.status , self.success_msg , self.error_msg  = status, success_msg, error_msg", "", ""], "lineno": [[[28, 8], [28, 28]], [[29, 8], [29, 38]], [[30, 8], [30, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "MockSSHClient", "me": "exec_command", "idiom": "Assign Multi Targets", "compli_code": ["stdout.channel.exit_status_ready = mock.MagicMock(return_value=True)", "stdout.read = mock.MagicMock(return_value=self.success_msg)", "stderr.read = mock.MagicMock(return_value=self.error_msg)"], "simple_code": ["stdout.channel.exit_status_ready , stdout.read , stderr.read  = mock.MagicMock(return_value=True), mock.MagicMock(return_value=self.success_msg), mock.MagicMock(return_value=self.error_msg)", "", ""], "lineno": [[[35, 8], [35, 76]], [[37, 8], [37, 67]], [[38, 8], [38, 65]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "get_instance", "idiom": "Assign Multi Targets", "compli_code": ["host=kwargs.get('host', '1.2.3.4')", "private_host=kwargs.get('private_host', '10.0.3.4')", "username=kwargs.get('username', 'ubuntu')", "key=kwargs.get('key', '/path/to/ssh/key')", "config=kwargs.get('config', configparser.ConfigParser())", "debug=kwargs.get('debug', False)", "use_public=kwargs.get('use_public', True)"], "simple_code": ["host , private_host , username , key , config , debug , use_public  = kwargs.get('host', '1.2.3.4'), kwargs.get('private_host', '10.0.3.4'), kwargs.get('username', 'ubuntu'), kwargs.get('key', '/path/to/ssh/key'), kwargs.get('config', configparser.ConfigParser()), kwargs.get('debug', False), kwargs.get('use_public', True)", "", "", "", "", "", ""], "lineno": [[[47, 8], [47, 42]], [[48, 8], [48, 59]], [[49, 8], [49, 49]], [[50, 8], [50, 49]], [[51, 8], [51, 64]], [[52, 8], [52, 40]], [[53, 8], [53, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "_get_instance", "idiom": "Assign Multi Targets", "compli_code": ["host=kwargs.get('host', '1.2.3.4')", "private_host=kwargs.get('private_host', '10.0.3.4')", "username=kwargs.get('username', 'ubuntu')", "key=kwargs.get('key', '/path/to/ssh/key')", "config=kwargs.get('config', configparser.ConfigParser())", "debug=kwargs.get('debug', False)", "use_public=kwargs.get('use_public', True)"], "simple_code": ["host , private_host , username , key , config , debug , use_public  = kwargs.get('host', '1.2.3.4'), kwargs.get('private_host', '10.0.3.4'), kwargs.get('username', 'ubuntu'), kwargs.get('key', '/path/to/ssh/key'), kwargs.get('config', configparser.ConfigParser()), kwargs.get('debug', False), kwargs.get('use_public', True)", "", "", "", "", "", ""], "lineno": [[[47, 8], [47, 42]], [[48, 8], [48, 59]], [[49, 8], [49, 49]], [[50, 8], [50, 49]], [[51, 8], [51, 64]], [[52, 8], [52, 40]], [[53, 8], [53, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_reachable_instance", "idiom": "Assign Multi Targets", "compli_code": ["mock_is_up.return_value = True", "ins = get_instance()"], "simple_code": ["mock_is_up.return_value , ins  = True, get_instance()", ""], "lineno": [[[65, 4], [65, 34]], [[66, 4], [66, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_unreachable_instance", "idiom": "Assign Multi Targets", "compli_code": ["mock_is_up.return_value = False", "ins = get_instance()"], "simple_code": ["mock_is_up.return_value , ins  = False, get_instance()", ""], "lineno": [[[74, 4], [74, 35]], [[75, 4], [75, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_run_cmd", "idiom": "Assign Multi Targets", "compli_code": ["mock_ssh_cli.return_value = MockSSHClient(0, b\"success\", b\"\")", "ins = get_instance()"], "simple_code": ["mock_ssh_cli.return_value , ins  = MockSSHClient(0, b'success', b''), get_instance()", ""], "lineno": [[[83, 4], [83, 65]], [[84, 4], [84, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_run_cmd", "idiom": "Assign Multi Targets", "compli_code": ["mock_ssh_cli.return_value = MockSSHClient(123, b\"\", b\"error\")", "ins = get_instance()"], "simple_code": ["mock_ssh_cli.return_value , ins  = MockSSHClient(123, b'', b'error'), get_instance()", ""], "lineno": [[[91, 4], [91, 65]], [[92, 4], [92, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_run_cmd2", "idiom": "Assign Multi Targets", "compli_code": ["mock_ssh_cli.return_value = MockSSHClient(0, b\"/home/ubuntu\", b\"\")", "ins = get_instance()"], "simple_code": ["mock_ssh_cli.return_value , ins  = MockSSHClient(0, b'/home/ubuntu', b''), get_instance()", ""], "lineno": [[[101, 4], [101, 70]], [[102, 4], [102, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_run_cmds", "idiom": "Assign Multi Targets", "compli_code": ["mock_ssh_cli.return_value = MockSSHClient(0, b\"/home/ubuntu\", b\"\")", "ins = get_instance()"], "simple_code": ["mock_ssh_cli.return_value , ins  = MockSSHClient(0, b'/home/ubuntu', b''), get_instance()", ""], "lineno": [[[109, 4], [109, 70]], [[110, 4], [110, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_failure_run_cmds", "idiom": "Assign Multi Targets", "compli_code": ["mock_ssh_cli.return_value = MockSSHClient(1, b\"\", b\"error\")", "ins = get_instance()"], "simple_code": ["mock_ssh_cli.return_value , ins  = MockSSHClient(1, b'', b'error'), get_instance()", ""], "lineno": [[[117, 4], [117, 63]], [[118, 4], [118, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_install_flambe", "idiom": "Assign Multi Targets", "compli_code": ["mock_run_cmd.return_value = RemoteCommand(True, b\"\")", "ins = get_instance(debug=False)"], "simple_code": ["mock_run_cmd.return_value , ins  = RemoteCommand(True, b''), get_instance(debug=False)", ""], "lineno": [[[126, 4], [126, 56]], [[127, 4], [127, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_install_flambe_gpu", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = True", "mock_run_cmd.return_value = RemoteCommand(True, b\"\")", "ins = get_instance(_class=instance.GPUFactoryInstance, debug=False)"], "simple_code": ["mock_contains_gpu.return_value , mock_run_cmd.return_value , ins  = True, RemoteCommand(True, b''), get_instance(_class=instance.GPUFactoryInstance, debug=False)", "", ""], "lineno": [[[138, 4], [138, 41]], [[139, 4], [139, 56]], [[140, 4], [140, 71]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_install_flambe_debug", "idiom": "Assign Multi Targets", "compli_code": ["mock_os_exists.return_value = False", "mock_flambe_loc.return_value = \"/home/user/flambe\"", "mock_get_home_path.return_value = \"/home/ubuntu\"", "mock_run_cmd.return_value = RemoteCommand(True, b\"\")", "ins = get_instance(debug=True)"], "simple_code": ["mock_os_exists.return_value , mock_flambe_loc.return_value , mock_get_home_path.return_value , mock_run_cmd.return_value , ins  = False, '/home/user/flambe', '/home/ubuntu', RemoteCommand(True, b''), get_instance(debug=True)", "", "", "", ""], "lineno": [[[154, 4], [154, 39]], [[155, 4], [155, 54]], [[157, 4], [157, 52]], [[158, 4], [158, 56]], [[160, 4], [160, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_install_flambe_debug_2", "idiom": "Assign Multi Targets", "compli_code": ["mock_os_exists.return_value = True", "mock_flambe_loc.return_value = \"/home/user/flambe\"", "mock_get_home_path.return_value = \"/home/ubuntu\"", "mock_run_cmd.return_value = RemoteCommand(True, b\"\")", "ins = get_instance(debug=True)"], "simple_code": ["mock_os_exists.return_value , mock_flambe_loc.return_value , mock_get_home_path.return_value , mock_run_cmd.return_value , ins  = True, '/home/user/flambe', '/home/ubuntu', RemoteCommand(True, b''), get_instance(debug=True)", "", "", "", ""], "lineno": [[[179, 4], [179, 38]], [[180, 4], [180, 54]], [[182, 4], [182, 52]], [[183, 4], [183, 56]], [[185, 4], [185, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_install_flambe_custom_pypi", "idiom": "Assign Multi Targets", "compli_code": ["mock_run_cmd.return_value = RemoteCommand(True, b\"\")", "config = configparser.ConfigParser()"], "simple_code": ["mock_run_cmd.return_value , config  = RemoteCommand(True, b''), configparser.ConfigParser()", ""], "lineno": [[[200, 4], [200, 56]], [[202, 4], [202, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_instance.py", "cl": "", "me": "test_install_flambe_custom_pypi", "idiom": "Assign Multi Targets", "compli_code": ["config['PIP']['HOST'] = 'some_host'", "config['PIP']['HOST_URL'] = 'https://some_url'"], "simple_code": ["config['PIP']['HOST'] , config['PIP']['HOST_URL']  = 'some_host', 'https://some_url'", ""], "lineno": [[[204, 4], [204, 39]], [[205, 4], [205, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "get_instance", "idiom": "Assign Multi Targets", "compli_code": ["host = kwargs.get('host', '1.2.3.4')", "private_host = kwargs.get('private_host', '10.0.3.4')", "username = kwargs.get('username', 'ubuntu')", "key = kwargs.get('key', '/path/to/ssh/key')", "config = kwargs.get('config', configparser.ConfigParser())", "debug = kwargs.get('debug', False)", "use_public = kwargs.get('use_public', True)"], "simple_code": ["host , private_host , username , key , config , debug , use_public  = kwargs.get('host', '1.2.3.4'), kwargs.get('private_host', '10.0.3.4'), kwargs.get('username', 'ubuntu'), kwargs.get('key', '/path/to/ssh/key'), kwargs.get('config', configparser.ConfigParser()), kwargs.get('debug', False), kwargs.get('use_public', True)", "", "", "", "", "", ""], "lineno": [[[34, 4], [34, 40]], [[35, 4], [35, 57]], [[36, 4], [36, 47]], [[37, 4], [37, 47]], [[38, 4], [38, 62]], [[39, 4], [39, 38]], [[40, 4], [40, 47]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "get_cluster", "idiom": "Assign Multi Targets", "compli_code": ["name = kwargs.get('name', 'cluster')", "factories_num = kwargs.get('factories_num', 2)", "username = kwargs.get(\"username\", \"ubuntu\")", "key = kwargs.get(\"key\", \"/path/to/key\")", "setup_cmds = kwargs.get(\"setup_cmds\", [])"], "simple_code": ["name , factories_num , username , key , setup_cmds  = kwargs.get('name', 'cluster'), kwargs.get('factories_num', 2), kwargs.get('username', 'ubuntu'), kwargs.get('key', '/path/to/key'), kwargs.get('setup_cmds', [])", "", "", "", ""], "lineno": [[[53, 8], [53, 44]], [[54, 8], [54, 54]], [[55, 8], [55, 51]], [[56, 8], [56, 47]], [[57, 8], [57, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "_get_cluster", "idiom": "Assign Multi Targets", "compli_code": ["name = kwargs.get('name', 'cluster')", "factories_num = kwargs.get('factories_num', 2)", "username = kwargs.get(\"username\", \"ubuntu\")", "key = kwargs.get(\"key\", \"/path/to/key\")", "setup_cmds = kwargs.get(\"setup_cmds\", [])"], "simple_code": ["name , factories_num , username , key , setup_cmds  = kwargs.get('name', 'cluster'), kwargs.get('factories_num', 2), kwargs.get('username', 'ubuntu'), kwargs.get('key', '/path/to/key'), kwargs.get('setup_cmds', [])", "", "", "", ""], "lineno": [[[53, 8], [53, 44]], [[54, 8], [54, 54]], [[55, 8], [55, 51]], [[56, 8], [56, 47]], [[57, 8], [57, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "test_orch_home_path", "idiom": "Assign Multi Targets", "compli_code": ["mock_get_home_path.return_value = \"/path/to/home\"", "c = get_cluster()"], "simple_code": ["mock_get_home_path.return_value , c  = '/path/to/home', get_cluster()", ""], "lineno": [[[88, 4], [88, 53]], [[89, 4], [89, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "test_send_secrets", "idiom": "Assign Multi Targets", "compli_code": ["mock_get_home_path.return_value = \"/path/to/home\"", "c = get_cluster()"], "simple_code": ["mock_get_home_path.return_value , c  = '/path/to/home', get_cluster()", ""], "lineno": [[[97, 4], [97, 53]], [[99, 4], [99, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "test_rsync_orch", "idiom": "Assign Multi Targets", "compli_code": ["mock_get_home_path.return_value = \"/path/to/home\"", "c = get_cluster()"], "simple_code": ["mock_get_home_path.return_value , c  = '/path/to/home', get_cluster()", ""], "lineno": [[[109, 4], [109, 53]], [[111, 4], [111, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "test_execute", "idiom": "Assign Multi Targets", "compli_code": ["mock_get_home_path.return_value = \"/path/to/home\"", "c = get_cluster()"], "simple_code": ["mock_get_home_path.return_value , c  = '/path/to/home', get_cluster()", ""], "lineno": [[[122, 4], [122, 53]], [[123, 4], [123, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "test_get_max_resources", "idiom": "Assign Multi Targets", "compli_code": ["c.factories[0].num_cpus = mock.Mock(return_value=100)", "c.factories[0].num_gpus = mock.Mock(return_value=10)", "c.factories[-1].num_cpus = mock.Mock(return_value=10)", "c.factories[-1].num_gpus = mock.Mock(return_value=100)"], "simple_code": ["c.factories[0].num_cpus , c.factories[0].num_gpus , c.factories[-1].num_cpus , c.factories[-1].num_gpus  = mock.Mock(return_value=100), mock.Mock(return_value=10), mock.Mock(return_value=10), mock.Mock(return_value=100)", "", "", ""], "lineno": [[[139, 4], [139, 57]], [[140, 4], [140, 56]], [[142, 4], [142, 57]], [[143, 4], [143, 58]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_cluster.py", "cl": "", "me": "test_get_remote_env", "idiom": "Assign Multi Targets", "compli_code": ["mock_get_home_path.return_value = \"/path/to/home\"", "c = get_cluster()"], "simple_code": ["mock_get_home_path.return_value , c  = '/path/to/home', get_cluster()", ""], "lineno": [[[153, 4], [153, 53]], [[154, 4], [154, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "ec2_mock", "idiom": "Assign Multi Targets", "compli_code": ["mock = mock_ec2()", "mock_cw = mock_cloudwatch()"], "simple_code": ["mock , mock_cw  = mock_ec2(), mock_cloudwatch()", ""], "lineno": [[[22, 4], [22, 21]], [[23, 4], [23, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_secrets", "idiom": "Assign Multi Targets", "compli_code": ["cluster = get_cluster()", "secrets = \"\"\"\n        [SOME_SECTION]\n        RANDOM = random\n    \"\"\""], "simple_code": ["cluster , secrets  = get_cluster(), '\\n        [SOME_SECTION]\\n        RANDOM = random\\n    '", ""], "lineno": [[[104, 4], [104, 27]], [[106, 4], [109, 7]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_launch_orchestrator", "idiom": "Assign Multi Targets", "compli_code": ["ec2 = boto3.resource('ec2')", "cluster = get_cluster(\n        name='cluster_name',\n        key_name='key_name',\n        orchestrator_type='t3.xlarge',\n        creator='leo.messi',\n        volume_size=500\n    )"], "simple_code": ["ec2 , cluster  = boto3.resource('ec2'), get_cluster(name='cluster_name', key_name='key_name', orchestrator_type='t3.xlarge', creator='leo.messi', volume_size=500)", ""], "lineno": [[[116, 4], [116, 31]], [[118, 4], [124, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_existing_orch", "idiom": "Assign Multi Targets", "compli_code": ["ec2 = boto3.resource('ec2')", "cluster = get_cluster()"], "simple_code": ["ec2 , cluster  = boto3.resource('ec2'), get_cluster()", ""], "lineno": [[[169, 4], [169, 31]], [[171, 4], [171, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_existing_orch", "idiom": "Assign Multi Targets", "compli_code": ["instance_id = orch.id", "cluster2 = get_cluster()"], "simple_code": ["instance_id , cluster2  = orch.id, get_cluster()", ""], "lineno": [[[180, 4], [180, 25]], [[182, 4], [182, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_existing_orch2", "idiom": "Assign Multi Targets", "compli_code": ["ec2 = boto3.resource('ec2')", "cluster = get_cluster(\n        name='cluster_name',\n        key_name='some_other_key',\n        orchestrator_type='t3.medium',\n        creator='leo.messi',\n        volume_size=500\n    )"], "simple_code": ["ec2 , cluster  = boto3.resource('ec2'), get_cluster(name='cluster_name', key_name='some_other_key', orchestrator_type='t3.medium', creator='leo.messi', volume_size=500)", ""], "lineno": [[[190, 4], [190, 31]], [[194, 4], [200, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_existing_orch2", "idiom": "Assign Multi Targets", "compli_code": ["instance_id = orch.id", "cluster2 = get_cluster(\n        name='cluster_name',\n        key_name='some_key', # Another key\n        orchestrator_type='t3.xlarge', # Another type\n        creator='leo.messi',\n    )"], "simple_code": ["instance_id , cluster2  = orch.id, get_cluster(name='cluster_name', key_name='some_key', orchestrator_type='t3.xlarge', creator='leo.messi')", ""], "lineno": [[[209, 4], [209, 25]], [[212, 4], [217, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_launch_factories", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = True", "ec2 = boto3.resource('ec2')", "cluster = get_cluster(\n        name='cluster_name',\n        factories_num=5,\n        factories_type='g3.4xlarge',\n        creator='leo.messi',\n        volume_size=500\n    )"], "simple_code": ["mock_contains_gpu.return_value , ec2 , cluster  = True, boto3.resource('ec2'), get_cluster(name='cluster_name', factories_num=5, factories_type='g3.4xlarge', creator='leo.messi', volume_size=500)", "", ""], "lineno": [[[244, 4], [244, 41]], [[246, 4], [246, 31]], [[248, 4], [254, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_launch_gpu_factories", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = True", "ec2 = boto3.resource('ec2')"], "simple_code": ["mock_contains_gpu.return_value , ec2  = True, boto3.resource('ec2')", ""], "lineno": [[[300, 4], [300, 41]], [[302, 4], [302, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_launch_gpu_factories", "idiom": "Assign Multi Targets", "compli_code": ["cluster = create_cluster()", "instances = list(ec2.instances.all())"], "simple_code": ["cluster , instances  = create_cluster(), list(ec2.instances.all())", ""], "lineno": [[[303, 4], [303, 30]], [[305, 4], [305, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_launch_cpu_factories", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = False", "ec2 = boto3.resource('ec2')"], "simple_code": ["mock_contains_gpu.return_value , ec2  = False, boto3.resource('ec2')", ""], "lineno": [[[316, 4], [316, 42]], [[318, 4], [318, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_launch_cpu_factories", "idiom": "Assign Multi Targets", "compli_code": ["cluster = create_cluster()", "instances = list(ec2.instances.all())"], "simple_code": ["cluster , instances  = create_cluster(), list(ec2.instances.all())", ""], "lineno": [[[319, 4], [319, 30]], [[321, 4], [321, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_get_host_abstractions", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = False", "cluster = create_cluster()"], "simple_code": ["mock_contains_gpu.return_value , cluster  = False, create_cluster()", ""], "lineno": [[[339, 4], [339, 42]], [[342, 4], [342, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_existing_factories", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = False", "ec2 = boto3.resource('ec2')", "cluster = get_cluster(factories_num=1)"], "simple_code": ["mock_contains_gpu.return_value , ec2 , cluster  = False, boto3.resource('ec2'), get_cluster(factories_num=1)", "", ""], "lineno": [[[372, 4], [372, 42]], [[373, 4], [373, 31]], [[375, 4], [375, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_existing_factories", "idiom": "Assign Multi Targets", "compli_code": ["instance_id = instances[0].id", "cluster2 = get_cluster(factories_num=1)"], "simple_code": ["instance_id , cluster2  = instances[0].id, get_cluster(factories_num=1)", ""], "lineno": [[[381, 4], [381, 33]], [[383, 4], [383, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_tags", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = True", "ec2 = boto3.resource('ec2')"], "simple_code": ["mock_contains_gpu.return_value , ec2  = True, boto3.resource('ec2')", ""], "lineno": [[[395, 4], [395, 41]], [[396, 4], [396, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_tags", "idiom": "Assign Multi Targets", "compli_code": ["cluster = create_cluster(\n        tags={\n            'random_tag': 'random_value',\n            'another_random_tag': 'another_random_value'\n        }\n    )", "instances = list(ec2.instances.all())", "keys = ['creator', 'Purpose', 'Cluster-Name', 'Role']"], "simple_code": ["cluster , instances , keys  = create_cluster(tags={'random_tag': 'random_value', 'another_random_tag': 'another_random_value'}), list(ec2.instances.all()), ['creator', 'Purpose', 'Cluster-Name', 'Role']", "", ""], "lineno": [[[398, 4], [403, 5]], [[405, 4], [405, 41]], [[407, 4], [407, 57]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_instances_lifecycle", "idiom": "Assign Multi Targets", "compli_code": ["mock_contains_gpu.return_value = True", "ec2 = boto3.resource('ec2')"], "simple_code": ["mock_contains_gpu.return_value , ec2  = True, boto3.resource('ec2')", ""], "lineno": [[[421, 4], [421, 41]], [[422, 4], [422, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/cluster/test_aws.py", "cl": "", "me": "test_instances_lifecycle", "idiom": "Assign Multi Targets", "compli_code": ["cluster = create_cluster()", "instances = list(ec2.instances.all())"], "simple_code": ["cluster , instances  = create_cluster(), list(ec2.instances.all())", ""], "lineno": [[[424, 4], [424, 30]], [[426, 4], [426, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/runner/test_args.py", "cl": "", "me": "args", "idiom": "Assign Multi Targets", "compli_code": ["args.config = 'config.yaml'", "args.debug = False", "args.force = False", "args.verbose = False", "args.install_extensions = False", "args.cluster = None", "args.secrets = None"], "simple_code": ["args.config , args.debug , args.force , args.verbose , args.install_extensions , args.cluster , args.secrets  = 'config.yaml', False, False, False, False, None, None", "", "", "", "", "", ""], "lineno": [[[13, 4], [13, 31]], [[14, 4], [14, 22]], [[15, 4], [15, 22]], [[16, 4], [16, 24]], [[17, 4], [17, 35]], [[18, 4], [18, 23]], [[19, 4], [19, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/runner/test_args.py", "cl": "", "me": "test_debug_remote", "idiom": "Assign Multi Targets", "compli_code": ["args.debug = True", "args.cluster = \"cluster.yaml\""], "simple_code": ["args.debug , args.cluster  = True, 'cluster.yaml'", ""], "lineno": [[[35, 4], [35, 21]], [[36, 4], [36, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/runner/test_args.py", "cl": "", "me": "test_runnable_args", "idiom": "Assign Multi Targets", "compli_code": ["mock_preprocess.return_value = (runnable, None)", "args.debug = debug", "args.force = force"], "simple_code": ["mock_preprocess.return_value , args.debug , args.force  = (runnable, None), debug, force", "", ""], "lineno": [[[46, 4], [46, 51]], [[47, 4], [47, 22]], [[48, 4], [48, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process", "idiom": "Truth Value Test", "compli_code": ["int(field.process('LABEL1')) == 0"], "simple_code": ["not int(field.process('LABEL1'))"], "lineno": [[[48, 11], [48, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_frequencies_3", "idiom": "Truth Value Test", "compli_code": ["len(field.vocab) == 0"], "simple_code": ["not len(field.vocab)"], "lineno": [[[147, 11], [147, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_frequencies_3", "idiom": "Truth Value Test", "compli_code": ["len(field.label_freq) == 0"], "simple_code": ["not len(field.label_freq)"], "lineno": [[[149, 11], [149, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_frequencies_3", "idiom": "Truth Value Test", "compli_code": ["len(field.label_count) == 0"], "simple_code": ["not len(field.label_count)"], "lineno": [[[150, 11], [150, 38]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_frequencies_3", "idiom": "Truth Value Test", "compli_code": ["len(field.label_inv_freq) == 0"], "simple_code": ["not len(field.label_inv_freq)"], "lineno": [[[151, 11], [151, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_bool_labels", "idiom": "Truth Value Test", "compli_code": ["int(field.process(False)) == 0"], "simple_code": ["not int(field.process(False))"], "lineno": [[[208, 11], [208, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_bool_labels", "idiom": "Truth Value Test", "compli_code": ["int(field.process(True)) == 0"], "simple_code": ["not int(field.process(True))"], "lineno": [[[216, 11], [216, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_labels", "idiom": "Truth Value Test", "compli_code": ["int(field.process('LABEL1')) == 0"], "simple_code": ["not int(field.process('LABEL1'))"], "lineno": [[[227, 11], [227, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_labels", "idiom": "Truth Value Test", "compli_code": ["int(field.process('LABEL3')) == 0"], "simple_code": ["not int(field.process('LABEL3'))"], "lineno": [[[237, 11], [237, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_tokenizer", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = LabelTokenizer()", "dummy = 'LABEL1'"], "simple_code": ["tokenizer , dummy  = LabelTokenizer(), 'LABEL1'", ""], "lineno": [[[14, 4], [14, 32]], [[16, 4], [16, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_tokenizer_multilabel", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = LabelTokenizer(multilabel_sep=',')", "dummy = 'LABEL1'"], "simple_code": ["tokenizer , dummy  = LabelTokenizer(multilabel_sep=','), 'LABEL1'", ""], "lineno": [[[28, 4], [28, 50]], [[30, 4], [30, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2']", "field = LabelField()"], "simple_code": ["dummy , field  = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2'], LabelField()", ""], "lineno": [[[42, 4], [42, 52]], [[44, 4], [44, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process_multilabel", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1,LABEL2', 'LABEL3', 'LABEL2,LABEL1', 'LABEL2']", "field = LabelField()"], "simple_code": ["dummy , field  = ['LABEL1,LABEL2', 'LABEL3', 'LABEL2,LABEL1', 'LABEL2'], LabelField()", ""], "lineno": [[[55, 4], [55, 66]], [[57, 4], [57, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process_one_hot", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2']", "field = LabelField(one_hot=True)"], "simple_code": ["dummy , field  = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2'], LabelField(one_hot=True)", ""], "lineno": [[[73, 4], [73, 52]], [[75, 4], [75, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process_multilabel_one_hot", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1,LABEL2', 'LABEL3', 'LABEL2,LABEL1', 'LABEL2']", "field = LabelField(multilabel_sep=',', one_hot=True)"], "simple_code": ["dummy , field  = ['LABEL1,LABEL2', 'LABEL3', 'LABEL2,LABEL1', 'LABEL2'], LabelField(multilabel_sep=',', one_hot=True)", ""], "lineno": [[[86, 4], [86, 66]], [[88, 4], [88, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_frequencies_2", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1'] * 80", "field = LabelField()"], "simple_code": ["dummy , field  = ['LABEL1'] * 80, LabelField()", ""], "lineno": [[[123, 4], [123, 27]], [[125, 4], [125, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_frequencies_3", "idiom": "Assign Multi Targets", "compli_code": ["dummy = []", "field = LabelField()"], "simple_code": ["dummy , field  = [], LabelField()", ""], "lineno": [[[142, 4], [142, 14]], [[144, 4], [144, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process_one_hot_frequencies", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2']", "field = LabelField(one_hot=True)"], "simple_code": ["dummy , field  = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2'], LabelField(one_hot=True)", ""], "lineno": [[[156, 4], [156, 52]], [[158, 4], [158, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_label_process_multilabel_one_hot_frequencies", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1,LABEL2', 'LABEL3', 'LABEL2,LABEL1', 'LABEL2']", "field = LabelField(multilabel_sep=',', one_hot=True)"], "simple_code": ["dummy , field  = ['LABEL1,LABEL2', 'LABEL3', 'LABEL2,LABEL1', 'LABEL2'], LabelField(multilabel_sep=',', one_hot=True)", ""], "lineno": [[[179, 4], [179, 66]], [[181, 4], [181, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_bool_labels", "idiom": "Assign Multi Targets", "compli_code": ["dummy = [True, False, True, True]", "field = LabelField(labels=[False, True])"], "simple_code": ["dummy , field  = [True, False, True, True], LabelField(labels=[False, True])", ""], "lineno": [[[202, 4], [202, 37]], [[204, 4], [204, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_labels", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2']", "field = LabelField(labels=['LABEL1', 'LABEL2', 'LABEL3'])"], "simple_code": ["dummy , field  = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2'], LabelField(labels=['LABEL1', 'LABEL2', 'LABEL3'])", ""], "lineno": [[[221, 4], [221, 52]], [[223, 4], [223, 61]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_labels_with_unkown_1", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2']", "field = LabelField(labels=['LABEL1', 'LABEL2'])"], "simple_code": ["dummy , field  = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2'], LabelField(labels=['LABEL1', 'LABEL2'])", ""], "lineno": [[[242, 4], [242, 52]], [[244, 4], [244, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_label_field.py", "cl": "", "me": "test_pass_labels_with_unkown_2", "idiom": "Assign Multi Targets", "compli_code": ["dummy = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2']", "field = LabelField(labels=['LABEL1', 'LABEL2', 'LABEL3'])"], "simple_code": ["dummy , field  = ['LABEL1', 'LABEL3', 'LABEL2', 'LABEL2'], LabelField(labels=['LABEL1', 'LABEL2', 'LABEL3'])", ""], "lineno": [[[251, 4], [251, 52]], [[253, 4], [253, 61]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_word_tokenizer", "idiom": "Truth Value Test", "compli_code": ["tokenizer(dummy) == []"], "simple_code": ["not tokenizer(dummy)"], "lineno": [[[27, 11], [27, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_nltk_word_tokenizer", "idiom": "Truth Value Test", "compli_code": ["tokenizer(dummy) == []"], "simple_code": ["not tokenizer(dummy)"], "lineno": [[[35, 11], [35, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer", "idiom": "Truth Value Test", "compli_code": ["tokenizer(dummy) == []"], "simple_code": ["not tokenizer(dummy)"], "lineno": [[[43, 11], [43, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_char_tokenizer", "idiom": "Truth Value Test", "compli_code": ["tokenizer(dummy) == []"], "simple_code": ["not tokenizer(dummy)"], "lineno": [[[85, 11], [85, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_empty", "idiom": "Truth Value Test", "compli_code": ["field.vocab == dict()"], "simple_code": ["not field.vocab"], "lineno": [[[184, 11], [184, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_word_tokenizer", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = WordTokenizer()", "dummy = \"justo. Praesent luctus.\""], "simple_code": ["tokenizer , dummy  = WordTokenizer(), 'justo. Praesent luctus.'", ""], "lineno": [[[22, 4], [22, 31]], [[24, 4], [24, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_nltk_word_tokenizer", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = NLTKWordTokenizer()", "dummy = \"justo. Praesent luctus.\""], "simple_code": ["tokenizer , dummy  = NLTKWordTokenizer(), 'justo. Praesent luctus.'", ""], "lineno": [[[30, 4], [30, 35]], [[32, 4], [32, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = NGramsTokenizer(2)", "dummy = \"justo. Praesent luctus.\""], "simple_code": ["tokenizer , dummy  = NGramsTokenizer(2), 'justo. Praesent luctus.'", ""], "lineno": [[[38, 4], [38, 34]], [[40, 4], [40, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer_equivalence", "idiom": "Assign Multi Targets", "compli_code": ["t1 = NGramsTokenizer(1)", "t2 = NLTKWordTokenizer()"], "simple_code": ["t1 , t2  = NGramsTokenizer(1), NLTKWordTokenizer()", ""], "lineno": [[[46, 4], [46, 27]], [[47, 4], [47, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer_equivalence_2", "idiom": "Assign Multi Targets", "compli_code": ["t = NGramsTokenizer([1,2,3])", "ret = []"], "simple_code": ["t , ret  = NGramsTokenizer([1, 2, 3]), []", ""], "lineno": [[[52, 4], [52, 32]], [[54, 4], [54, 12]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer_stopwords", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = NGramsTokenizer(2, exclude_stopwords=True)", "dummy = \"justo. Praesent the luctus.\""], "simple_code": ["tokenizer , dummy  = NGramsTokenizer(2, exclude_stopwords=True), 'justo. Praesent the luctus.'", ""], "lineno": [[[62, 4], [62, 58]], [[64, 4], [64, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer_stopwords", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = NGramsTokenizer(1, exclude_stopwords=True)", "dummy = \"justo. Praesent the luctus.\""], "simple_code": ["tokenizer , dummy  = NGramsTokenizer(1, exclude_stopwords=True), 'justo. Praesent the luctus.'", ""], "lineno": [[[67, 4], [67, 58]], [[69, 4], [69, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_ngram_tokenizer_stopwords", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = NGramsTokenizer(2, exclude_stopwords=True, stop_words=[\"Praesent\", \"the\"])", "dummy = \"justo. Praesent the luctus.\""], "simple_code": ["tokenizer , dummy  = NGramsTokenizer(2, exclude_stopwords=True, stop_words=['Praesent', 'the']), 'justo. Praesent the luctus.'", ""], "lineno": [[[72, 4], [72, 90]], [[74, 4], [74, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_char_tokenizer", "idiom": "Assign Multi Targets", "compli_code": ["tokenizer = CharTokenizer()", "dummy = \"justo. Praesent\""], "simple_code": ["tokenizer , dummy  = CharTokenizer(), 'justo. Praesent'", ""], "lineno": [[[79, 4], [79, 31]], [[81, 4], [81, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_list", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField()", "dummy = [\n        [\"justo Praesent luctus\", \"luctus praesent\"],\n        [\"justo Praesent luctus\", \"luctus praesent est\"]]"], "simple_code": ["field , dummy  = TextField(), [['justo Praesent luctus', 'luctus praesent'], ['justo Praesent luctus', 'luctus praesent est']]", ""], "lineno": [[[102, 4], [102, 23]], [[103, 4], [105, 57]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_dict", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField()", "dummy = [{\n        'text1': \"justo Praesent luctus luctus praesent\",\n        'text2': \"justo Praesent luctus luctus praesent est\"}]"], "simple_code": ["field , dummy  = TextField(), [{'text1': 'justo Praesent luctus luctus praesent', 'text2': 'justo Praesent luctus luctus praesent est'}]", ""], "lineno": [[[114, 4], [114, 23]], [[115, 4], [117, 62]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_nested_list_in_dict", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField()", "dummy = [{\n        'text1': [\"justo Praesent luctus\", \"luctus praesent\"],\n        'text2': [\"justo Praesent luctus\", \"luctus praesent est\"]}]"], "simple_code": ["field , dummy  = TextField(), [{'text1': ['justo Praesent luctus', 'luctus praesent'], 'text2': ['justo Praesent luctus', 'luctus praesent est']}]", ""], "lineno": [[[126, 4], [126, 23]], [[127, 4], [129, 67]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_nested_dict_in_list_in_dict", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField()", "dummy = [\n        {'text1': \"justo Praesent luctus\", 'text2': \"luctus praesent\"},\n        {'text3': [\"justo Praesent luctus\", \"luctus praesent est\"]}\n    ]"], "simple_code": ["field , dummy  = TextField(), [{'text1': 'justo Praesent luctus', 'text2': 'luctus praesent'}, {'text3': ['justo Praesent luctus', 'luctus praesent est']}]", ""], "lineno": [[[138, 4], [138, 23]], [[139, 4], [142, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_lower", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField(lower=True, pad_token=None, unk_token=None)", "dummy = [\"justo Praesent luctus\", \"luctus praesent\"]"], "simple_code": ["field , dummy  = TextField(lower=True, pad_token=None, unk_token=None), ['justo Praesent luctus', 'luctus praesent']", ""], "lineno": [[[162, 4], [162, 65]], [[164, 4], [164, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_build_vocab_build_vocab_from_embeddings", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField.from_embeddings(\n            embeddings=tmpfile.name,\n            embeddings_format='gensim',\n            build_vocab_from_embeddings=True,\n        )", "dummy = [\"blue green\", \"yellow\", 'white']"], "simple_code": ["field , dummy  = TextField.from_embeddings(embeddings=tmpfile.name, embeddings_format='gensim', build_vocab_from_embeddings=True), ['blue green', 'yellow', 'white']", ""], "lineno": [[[228, 8], [232, 9]], [[234, 8], [234, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_load_embeddings", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField.from_embeddings(\n        embeddings=\"tests/data/dummy_embeddings/test.txt\",\n        pad_token=None,\n        unk_init_all=False,\n    )", "dummy = \"a test !\""], "simple_code": ["field , dummy  = TextField.from_embeddings(embeddings='tests/data/dummy_embeddings/test.txt', pad_token=None, unk_init_all=False), 'a test !'", ""], "lineno": [[[285, 4], [289, 5]], [[290, 4], [290, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_load_embeddings_with_extra_tokens", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField.from_embeddings(\n        embeddings=\"tests/data/dummy_embeddings/test.txt\",\n        pad_token=None,\n        unk_init_all=False,\n        additional_special_tokens=['<a>', '<b>', '<c>']\n    )", "dummy = \"a test ! <a> <b> \""], "simple_code": ["field , dummy  = TextField.from_embeddings(embeddings='tests/data/dummy_embeddings/test.txt', pad_token=None, unk_init_all=False, additional_special_tokens=['<a>', '<b>', '<c>']), 'a test ! <a> <b> '", ""], "lineno": [[[300, 4], [305, 5]], [[306, 4], [306, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_load_embeddings_legacy", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField(\n        embeddings=\"tests/data/dummy_embeddings/test.txt\",\n        pad_token=None,\n        unk_init_all=False,\n    )", "dummy = \"a test !\""], "simple_code": ["field , dummy  = TextField(embeddings='tests/data/dummy_embeddings/test.txt', pad_token=None, unk_init_all=False), 'a test !'", ""], "lineno": [[[315, 4], [319, 5]], [[320, 4], [320, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_load_embeddings_empty_voc", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField.from_embeddings(\n        embeddings=\"tests/data/dummy_embeddings/test.txt\",\n        pad_token=None,\n        unk_init_all=True,\n    )", "dummy = \"justo Praesent luctus justo praesent\""], "simple_code": ["field , dummy  = TextField.from_embeddings(embeddings='tests/data/dummy_embeddings/test.txt', pad_token=None, unk_init_all=True), 'justo Praesent luctus justo praesent'", ""], "lineno": [[[330, 4], [334, 5]], [[336, 4], [336, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_load_embeddings_empty_voc", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField.from_embeddings(\n        embeddings=\"tests/data/dummy_embeddings/test.txt\",\n        pad_token=None,\n        unk_init_all=False,\n    )", "dummy = \"justo Praesent luctus justo praesent\""], "simple_code": ["field , dummy  = TextField.from_embeddings(embeddings='tests/data/dummy_embeddings/test.txt', pad_token=None, unk_init_all=False), 'justo Praesent luctus justo praesent'", ""], "lineno": [[[342, 4], [346, 5]], [[348, 4], [348, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_bow_text_process", "idiom": "Assign Multi Targets", "compli_code": ["field = BoWField(min_freq=2)", "dummy = \"justo praesent luctus justo praesent\""], "simple_code": ["field , dummy  = BoWField(min_freq=2), 'justo praesent luctus justo praesent'", ""], "lineno": [[[367, 4], [367, 32]], [[369, 4], [369, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_bow_text_process_normalize", "idiom": "Assign Multi Targets", "compli_code": ["field = BoWField(min_freq=2, normalize=True)", "dummy = \"justo praesent luctus justo praesent\""], "simple_code": ["field , dummy  = BoWField(min_freq=2, normalize=True), 'justo praesent luctus justo praesent'", ""], "lineno": [[[375, 4], [375, 48]], [[377, 4], [377, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_bow_text_process_normalize_scale", "idiom": "Assign Multi Targets", "compli_code": ["field = BoWField(min_freq=2, normalize=True, scale_factor=10)", "dummy = \"justo praesent luctus justo praesent\""], "simple_code": ["field , dummy  = BoWField(min_freq=2, normalize=True, scale_factor=10), 'justo praesent luctus justo praesent'", ""], "lineno": [[[383, 4], [383, 65]], [[385, 4], [385, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_text_process_unk", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField(unk_token=None)", "dummy = \"justo Praesent luctus justo praesent\""], "simple_code": ["field , dummy  = TextField(unk_token=None), 'justo Praesent luctus justo praesent'", ""], "lineno": [[[407, 4], [407, 37]], [[409, 4], [409, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/field/test_text_field.py", "cl": "", "me": "test_setup_with_extra_tokens", "idiom": "Assign Multi Targets", "compli_code": ["field = TextField.from_embeddings(\n        embeddings=\"tests/data/dummy_embeddings/test.txt\",\n        pad_token=None,\n        unk_init_all=False,\n        additional_special_tokens=['<a>', '<b>', '<c>']\n    )", "dummy = \"this is a test\""], "simple_code": ["field , dummy  = TextField.from_embeddings(embeddings='tests/data/dummy_embeddings/test.txt', pad_token=None, unk_init_all=False, additional_special_tokens=['<a>', '<b>', '<c>']), 'this is a test'", ""], "lineno": [[[424, 4], [429, 5]], [[431, 4], [431, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationExtensions", "me": "test_add_extensions_metadata", "idiom": "Truth Value Test", "compli_code": ["schema_obj._extensions == {}"], "simple_code": ["not schema_obj._extensions"], "lineno": [[[815, 15], [815, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationExtensions", "me": "test_add_extensions_metadata", "idiom": "Truth Value Test", "compli_code": ["schema_obj._extensions == {}"], "simple_code": ["not schema_obj._extensions"], "lineno": [[[818, 15], [818, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "make_classes_2", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[81, 12], [81, 28]], [[82, 12], [82, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "make_classes_2", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2", "self.bkw3 = bkw3"], "simple_code": ["self.bkw1 , self.bkw2 , self.bkw3  = bkw1, bkw2, bkw3", "", ""], "lineno": [[[87, 12], [87, 28]], [[88, 12], [88, 28]], [[89, 12], [89, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "make_classes_2", "idiom": "Assign Multi Targets", "compli_code": ["self.one = one", "self.two = two"], "simple_code": ["self.one , self.two  = one, two", ""], "lineno": [[[94, 12], [94, 26]], [[95, 12], [95, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[81, 12], [81, 28]], [[82, 12], [82, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2", "self.bkw3 = bkw3"], "simple_code": ["self.bkw1 , self.bkw2 , self.bkw3  = bkw1, bkw2, bkw3", "", ""], "lineno": [[[87, 12], [87, 28]], [[88, 12], [88, 28]], [[89, 12], [89, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "C", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.one = one", "self.two = two"], "simple_code": ["self.one , self.two  = one, two", ""], "lineno": [[[94, 12], [94, 26]], [[95, 12], [95, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "IntermediateStatefulTorch", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.leaf = BasicStateful(x=x)", "self.linear = torch.nn.Linear(2, 2)"], "simple_code": ["self.leaf , self.linear  = BasicStateful(x=x), torch.nn.Linear(2, 2)", ""], "lineno": [[[132, 8], [132, 38]], [[133, 8], [133, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "IntermediateTorchOnly", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.child = component", "self.linear = torch.nn.Linear(2, 2)"], "simple_code": ["self.child , self.linear  = component, torch.nn.Linear(2, 2)", ""], "lineno": [[[139, 8], [139, 30]], [[140, 8], [140, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "ComposableTorchStateful", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.child = a", "self.other_data = b", "self.linear = c"], "simple_code": ["self.child , self.other_data , self.linear  = a, b, c", "", ""], "lineno": [[[155, 8], [155, 22]], [[156, 8], [156, 27]], [[157, 8], [157, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "ComposableTorchStatefulPrime", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.child = a", "self.other_data = b", "self.linear = c"], "simple_code": ["self.child , self.other_data , self.linear  = a, b, c", "", ""], "lineno": [[[164, 8], [164, 22]], [[165, 8], [165, 27]], [[166, 8], [166, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "ComposableTorchStatefulTorchOnlyChild", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.child = a", "self.other_data = b", "self.torch_only = IntermediateTorchOnly(c)"], "simple_code": ["self.child , self.other_data , self.torch_only  = a, b, IntermediateTorchOnly(c)", "", ""], "lineno": [[[180, 8], [180, 22]], [[181, 8], [181, 27]], [[182, 8], [182, 50]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "Org", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.item = item", "self.torch_only_extra = extra"], "simple_code": ["self.item , self.torch_only_extra  = item, extra", ""], "lineno": [[[193, 8], [193, 24]], [[194, 8], [194, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "complex_builder", "idiom": "Assign Multi Targets", "compli_code": ["a1 = BasicStateful(x=x)", "b1 = 2021", "c1 = torch.nn.Linear(2, 2)"], "simple_code": ["a1 , b1 , c1  = BasicStateful(x=x), 2021, torch.nn.Linear(2, 2)", "", ""], "lineno": [[[280, 8], [280, 31]], [[281, 8], [281, 17]], [[282, 8], [282, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "complex_builder", "idiom": "Assign Multi Targets", "compli_code": ["a2 = ComposableTorchStateful(a1, b1, c1)", "b2 = 2022", "c2 = torch.nn.Linear(2, 2)"], "simple_code": ["a2 , b2 , c2  = ComposableTorchStateful(a1, b1, c1), 2022, torch.nn.Linear(2, 2)", "", ""], "lineno": [[[283, 8], [283, 48]], [[284, 8], [284, 17]], [[285, 8], [285, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "complex_builder", "idiom": "Assign Multi Targets", "compli_code": ["a3 = ComposableTorchStateful(a2, b2, c2)", "b3 = 2023", "c3 = torch.nn.Linear(2, 2)"], "simple_code": ["a3 , b3 , c3  = ComposableTorchStateful(a2, b2, c2), 2023, torch.nn.Linear(2, 2)", "", ""], "lineno": [[[286, 8], [286, 48]], [[287, 8], [287, 17]], [[288, 8], [288, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "complex_builder_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["a1 = BasicStateful(x=x)", "b1 = 2021", "c1 = torch.nn.Linear(2, 2)"], "simple_code": ["a1 , b1 , c1  = BasicStateful(x=x), 2021, torch.nn.Linear(2, 2)", "", ""], "lineno": [[[322, 8], [322, 31]], [[323, 8], [323, 17]], [[324, 8], [324, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "complex_builder_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["a2 = ComposableTorchStateful(a1, b1, c1)", "b2 = 2022", "c2 = torch.nn.Linear(2, 2)"], "simple_code": ["a2 , b2 , c2  = ComposableTorchStateful(a1, b1, c1), 2022, torch.nn.Linear(2, 2)", "", ""], "lineno": [[[325, 8], [325, 48]], [[326, 8], [326, 17]], [[327, 8], [327, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "", "me": "complex_builder_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["a3 = ComposableTorchStateful(a2, b2, c2)", "b3 = 2023", "c3 = torch.nn.Linear(2, 2)"], "simple_code": ["a3 , b3 , c3  = ComposableTorchStateful(a2, b2, c2), 2023, torch.nn.Linear(2, 2)", "", ""], "lineno": [[[328, 8], [328, 48]], [[329, 8], [329, 17]], [[330, 8], [330, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestState", "me": "test_state_nested_but_empty", "idiom": "Assign Multi Targets", "compli_code": ["expected_state = {}", "expected_metadata = {'': {FLAMBE_SOURCE_KEY: \"class Composite(Component):\\n    def __init__(self):\\n        self.leaf = Basic()\\n\", VERSION_KEY: \"0.0.0\", FLAMBE_CLASS_KEY: 'Composite'}, 'leaf': {FLAMBE_SOURCE_KEY: 'class Basic(Component):\\n    pass\\n', VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'Basic'}, FLAMBE_DIRECTORIES_KEY: {'', 'leaf'}, KEEP_VARS_KEY: False}", "obj = nested_object(from_config=False)"], "simple_code": ["expected_state , expected_metadata , obj  = {}, {'': {FLAMBE_SOURCE_KEY: 'class Composite(Component):\\n    def __init__(self):\\n        self.leaf = Basic()\\n', VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'Composite'}, 'leaf': {FLAMBE_SOURCE_KEY: 'class Basic(Component):\\n    pass\\n', VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'Basic'}, FLAMBE_DIRECTORIES_KEY: {'', 'leaf'}, KEEP_VARS_KEY: False}, nested_object(from_config=False)", "", ""], "lineno": [[[382, 8], [382, 27]], [[383, 8], [383, 370]], [[384, 8], [384, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestState", "me": "test_state_pytorch_alternating_nested_with_modules", "idiom": "Assign Multi Targets", "compli_code": ["t1 = obj.model.linear.weight", "t2 = obj.model.linear.bias", "x = obj.model.leaf.x"], "simple_code": ["t1 , t2 , x  = obj.model.linear.weight, obj.model.linear.bias, obj.model.leaf.x", "", ""], "lineno": [[[420, 8], [420, 36]], [[421, 8], [421, 34]], [[422, 8], [422, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestState", "me": "test_state_pytorch_alternating_nested_with_modules", "idiom": "Assign Multi Targets", "compli_code": ["expected_state = {'model.leaf.x': x, 'model.linear.weight': t1, 'model.linear.bias': t2}", "root_source_code = dill.source.getsource(RootTorch)", "intermediate_source_code = dill.source.getsource(IntermediateStatefulTorch)", "leaf_source_code = dill.source.getsource(BasicStateful)"], "simple_code": ["expected_state , root_source_code , intermediate_source_code , leaf_source_code  = {'model.leaf.x': x, 'model.linear.weight': t1, 'model.linear.bias': t2}, dill.source.getsource(RootTorch), dill.source.getsource(IntermediateStatefulTorch), dill.source.getsource(BasicStateful)", "", "", ""], "lineno": [[[423, 8], [423, 96]], [[424, 8], [424, 59]], [[425, 8], [425, 83]], [[426, 8], [426, 63]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestState", "me": "test_state_pytorch_alternating_nested_with_modules", "idiom": "Assign Multi Targets", "compli_code": ["expected_metadata = OrderedDict({FLAMBE_DIRECTORIES_KEY: set(['', 'model', 'model.leaf']), 'keep_vars': False, '': {VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'RootTorch', FLAMBE_SOURCE_KEY: root_source_code, FLAMBE_CONFIG_KEY: \"!RootTorch\\nx: 1\\n\"},\n                                                                                             'model': {VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'IntermediateStatefulTorch', FLAMBE_SOURCE_KEY: intermediate_source_code, 'version': 1},  # TODO add config back: FLAMBE_CONFIG_KEY: \"!IntermediateStatefulTorch {}\\n\"\n                                                                                             'model.leaf': {VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'BasicStateful', FLAMBE_SOURCE_KEY: leaf_source_code},  # TODO add config back: FLAMBE_CONFIG_KEY: \"!BasicStateful {}\\n\"\n                                                                                             'model.linear': {'version': 1}})", "state = obj.get_state()"], "simple_code": ["expected_metadata , state  = OrderedDict({FLAMBE_DIRECTORIES_KEY: set(['', 'model', 'model.leaf']), 'keep_vars': False, '': {VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'RootTorch', FLAMBE_SOURCE_KEY: root_source_code, FLAMBE_CONFIG_KEY: '!RootTorch\\nx: 1\\n'}, 'model': {VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'IntermediateStatefulTorch', FLAMBE_SOURCE_KEY: intermediate_source_code, 'version': 1}, 'model.leaf': {VERSION_KEY: '0.0.0', FLAMBE_CLASS_KEY: 'BasicStateful', FLAMBE_SOURCE_KEY: leaf_source_code}, 'model.linear': {'version': 1}}), obj.get_state()", ""], "lineno": [[[427, 8], [430, 125]], [[431, 8], [431, 31]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestLoadState", "me": "test_state_complex_multilayered_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["TORCH_TAG_PREFIX = \"torch\"", "exclude = ['torch.nn.quantized', 'torch.nn.qat']"], "simple_code": ["TORCH_TAG_PREFIX , exclude  = 'torch', ['torch.nn.quantized', 'torch.nn.qat']", ""], "lineno": [[[456, 8], [456, 34]], [[457, 8], [457, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestLoadState", "me": "test_state_complex_multilayered_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["t1 = obj.item.child.linear.weight.data", "state = obj.get_state()", "new_obj = complex_multi_layered_nontorch_root(from_config=True, x=2)"], "simple_code": ["t1 , state , new_obj  = obj.item.child.linear.weight.data, obj.get_state(), complex_multi_layered_nontorch_root(from_config=True, x=2)", "", ""], "lineno": [[[466, 8], [466, 46]], [[467, 8], [467, 31]], [[468, 8], [468, 76]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_state_and_load_roundtrip_single_object", "idiom": "Assign Multi Targets", "compli_code": ["state = old_obj.get_state()", "new_obj = basic_object(from_config=False)"], "simple_code": ["state , new_obj  = old_obj.get_state(), basic_object(from_config=False)", ""], "lineno": [[[524, 8], [524, 35]], [[525, 8], [525, 49]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_state_and_load_roundtrip_pytorch_alternating", "idiom": "Assign Multi Targets", "compli_code": ["state = old_obj.get_state()", "new_obj = alternating_nn_module_with_state(from_config=False, x=2)"], "simple_code": ["state , new_obj  = old_obj.get_state(), alternating_nn_module_with_state(from_config=False, x=2)", ""], "lineno": [[[534, 8], [534, 35]], [[535, 8], [535, 74]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_state_and_load_roundtrip_pytorch_alternating", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[537, 8], [537, 39]], [[538, 8], [538, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_save_to_file_and_load_from_file_roundtrip", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[559, 8], [559, 39]], [[560, 8], [560, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_save_to_file_and_load_from_file_roundtrip_pytorch", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[572, 8], [572, 39]], [[573, 8], [573, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_save_to_file_and_load_from_file_roundtrip_complex", "idiom": "Assign Multi Targets", "compli_code": ["TORCH_TAG_PREFIX = \"torch\"", "exclude = ['torch.nn.quantized', 'torch.nn.qat']"], "simple_code": ["TORCH_TAG_PREFIX , exclude  = 'torch', ['torch.nn.quantized', 'torch.nn.qat']", ""], "lineno": [[[578, 8], [578, 34]], [[579, 8], [579, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_save_to_file_and_load_from_file_roundtrip_complex", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[599, 8], [599, 39]], [[600, 8], [600, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_save_to_file_and_load_from_file_roundtrip_complex_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["TORCH_TAG_PREFIX = \"torch\"", "exclude = ['torch.nn.quantized', 'torch.nn.qat']"], "simple_code": ["TORCH_TAG_PREFIX , exclude  = 'torch', ['torch.nn.quantized', 'torch.nn.qat']", ""], "lineno": [[[608, 8], [608, 34]], [[609, 8], [609, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_save_to_file_and_load_from_file_roundtrip_complex_nontorch_root", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[632, 8], [632, 39]], [[633, 8], [633, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[650, 8], [650, 39]], [[651, 8], [651, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_requirements_file", "idiom": "Assign Multi Targets", "compli_code": ["mock_freeze.return_value = ['pkgA==1.2.3', 'pkgB']", "old_obj = basic_object(from_config=True)"], "simple_code": ["mock_freeze.return_value , old_obj  = ['pkgA==1.2.3', 'pkgB'], basic_object(from_config=True)", ""], "lineno": [[[658, 8], [658, 58]], [[659, 8], [659, 48]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip_pytorch", "idiom": "Assign Multi Targets", "compli_code": ["old_state = old_obj.get_state()", "new_state = new_obj.get_state()"], "simple_code": ["old_state , new_state  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[688, 8], [688, 39]], [[689, 8], [689, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip_pytorch_only_bridge", "idiom": "Assign Multi Targets", "compli_code": ["a = BasicStateful.compile(x=3)", "b = 100", "c = BasicStatefulTwo.compile(y=0)"], "simple_code": ["a , b , c  = BasicStateful.compile(x=3), 100, BasicStatefulTwo.compile(y=0)", "", ""], "lineno": [[[694, 8], [694, 38]], [[695, 8], [695, 15]], [[696, 8], [696, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip_pytorch_only_bridge", "idiom": "Assign Multi Targets", "compli_code": ["extra = torch.nn.Linear(2, 2)", "old_obj = Org.compile(item=item, extra=None)", "a2 = BasicStateful.compile(x=4)", "b2 = 101", "c2 = BasicStatefulTwo.compile(y=1)"], "simple_code": ["extra , old_obj , a2 , b2 , c2  = torch.nn.Linear(2, 2), Org.compile(item=item, extra=None), BasicStateful.compile(x=4), 101, BasicStatefulTwo.compile(y=1)", "", "", "", ""], "lineno": [[[698, 8], [698, 37]], [[699, 8], [699, 52]], [[701, 8], [701, 39]], [[702, 8], [702, 16]], [[704, 8], [704, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip_pytorch_only_bridge", "idiom": "Assign Multi Targets", "compli_code": ["extra2 = torch.nn.Linear(2, 2)", "new_obj = Org.compile(item=item2, extra=None)"], "simple_code": ["extra2 , new_obj  = torch.nn.Linear(2, 2), Org.compile(item=item2, extra=None)", ""], "lineno": [[[706, 8], [706, 38]], [[707, 8], [707, 53]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip_pytorch_only_bridge", "idiom": "Assign Multi Targets", "compli_code": ["old_state_get = old_obj.get_state()", "new_state_get = new_obj.get_state()"], "simple_code": ["old_state_get , new_state_get  = old_obj.get_state(), new_obj.get_state()", ""], "lineno": [[[716, 8], [716, 43]], [[717, 8], [717, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_roundtrip_pytorch_only_bridge", "idiom": "Assign Multi Targets", "compli_code": ["path = os.path.join(root_path, 'asavefile2.flambe')", "old_state = old_obj.get_state()"], "simple_code": ["path , old_state  = os.path.join(root_path, 'asavefile2.flambe'), old_obj.get_state()", ""], "lineno": [[[709, 12], [709, 63]], [[710, 12], [710, 43]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationIntegration", "me": "test_module_save_and_load_single_instance_appears_twice", "idiom": "Assign Multi Targets", "compli_code": ["state = load_state_from_file(path)", "loaded_c = load(path)"], "simple_code": ["state , loaded_c  = load_state_from_file(path), load(path)", ""], "lineno": [[[755, 12], [755, 46]], [[756, 12], [756, 33]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationExtensions", "me": "test_save_to_file_and_load_from_file_with_extensions", "idiom": "Assign Multi Targets", "compli_code": ["mock_installed_module.return_value = True", "schema_obj = schema()"], "simple_code": ["mock_installed_module.return_value , schema_obj  = True, schema()", ""], "lineno": [[[781, 8], [781, 49]], [[783, 8], [783, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationExtensions", "me": "test_add_extensions_metadata_2", "idiom": "Assign Multi Targets", "compli_code": ["TORCH_TAG_PREFIX = \"torch\"", "exclude = ['torch.nn.quantized', 'torch.nn.qat']"], "simple_code": ["TORCH_TAG_PREFIX , exclude  = 'torch', ['torch.nn.quantized', 'torch.nn.qat']", ""], "lineno": [[[829, 8], [829, 34]], [[830, 8], [830, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_serialization.py", "cl": "TestSerializationExtensions", "me": "test_add_extensions_metadata_3", "idiom": "Assign Multi Targets", "compli_code": ["TORCH_TAG_PREFIX = \"torch\"", "exclude = ['torch.nn.quantized', 'torch.nn.qat']"], "simple_code": ["TORCH_TAG_PREFIX , exclude  = 'torch', ['torch.nn.quantized', 'torch.nn.qat']", ""], "lineno": [[[862, 8], [862, 34]], [[863, 8], [863, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[14, 12], [14, 28]], [[15, 12], [15, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[37, 12], [37, 28]], [[38, 12], [38, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[14, 12], [14, 28]], [[15, 12], [15, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[37, 12], [37, 28]], [[38, 12], [38, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_namespace_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[59, 16], [59, 32]], [[60, 16], [60, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_namespace_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[82, 16], [82, 32]], [[83, 16], [83, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[59, 16], [59, 32]], [[60, 16], [60, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[82, 16], [82, 32]], [[83, 16], [83, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_aliased_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[104, 12], [104, 28]], [[105, 12], [105, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_aliased_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[129, 12], [129, 28]], [[130, 12], [130, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[104, 12], [104, 28]], [[105, 12], [105, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[129, 12], [129, 28]], [[130, 12], [130, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_new_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[150, 12], [150, 28]], [[151, 12], [151, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "make_new_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[165, 12], [165, 28]], [[166, 12], [166, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[150, 12], [150, 28]], [[151, 12], [151, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[165, 12], [165, 28]], [[166, 12], [166, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_dump_basic", "idiom": "Assign Multi Targets", "compli_code": ["txt = \"\"\"!A\nakw1: 8\nakw2: !B\n  bkw1: 2\n  bkw2: hello world\n\"\"\"", "b = B(2, \"hello world\")"], "simple_code": ["txt , b  = '!A\\nakw1: 8\\nakw2: !B\\n  bkw1: 2\\n  bkw2: hello world\\n', B(2, 'hello world')", ""], "lineno": [[[219, 4], [224, 3]], [[226, 4], [226, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_dump_alias", "idiom": "Assign Multi Targets", "compli_code": ["txt = \"\"\"!a_class\nakw1: 8\nakw2: !b_class\n  bkw1: 2\n  bkw2: hello world\n\"\"\"", "b = B(2, \"hello world\")"], "simple_code": ["txt , b  = '!a_class\\nakw1: 8\\nakw2: !b_class\\n  bkw1: 2\\n  bkw2: hello world\\n', B(2, 'hello world')", ""], "lineno": [[[268, 4], [273, 3]], [[275, 4], [275, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_roundtrip_alias_default", "idiom": "Assign Multi Targets", "compli_code": ["txt_default_alias = \"\"\"a: !a_class\n  akw1: 8\n  akw2: !b_\n    bkw1: 2\n    bkw2: hello world\n\"\"\"", "config = yaml.load(txt)"], "simple_code": ["txt_default_alias , config  = 'a: !a_class\\n  akw1: 8\\n  akw2: !b_\\n    bkw1: 2\\n    bkw2: hello world\\n', yaml.load(txt)", ""], "lineno": [[[291, 4], [296, 3]], [[297, 4], [297, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_dump_new_class", "idiom": "Assign Multi Targets", "compli_code": ["txt = \"\"\"!a_class\nakw1: 8\nakw2: !b_class\n  bkw1: 2\n  bkw2: hello world\n\"\"\"", "b = B(2, \"hello world\")"], "simple_code": ["txt , b  = '!a_class\\nakw1: 8\\nakw2: !b_class\\n  bkw1: 2\\n  bkw2: hello world\\n', B(2, 'hello world')", ""], "lineno": [[[323, 4], [328, 3]], [[330, 4], [330, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_roundtrip_new_default", "idiom": "Assign Multi Targets", "compli_code": ["txt_default_alias = \"\"\"a: !a_class\n  akw1: 8\n  akw2: !b_\n    bkw1: 2\n    bkw2: hello world\n\"\"\"", "config = yaml.load(txt)"], "simple_code": ["txt_default_alias , config  = 'a: !a_class\\n  akw1: 8\\n  akw2: !b_\\n    bkw1: 2\\n    bkw2: hello world\\n', yaml.load(txt)", ""], "lineno": [[[346, 4], [351, 3]], [[352, 4], [352, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_factory_roundtrip", "idiom": "Assign Multi Targets", "compli_code": ["txt_default_alias = \"\"\"a: !A.some_factory\n  akw1: 8\n  akw2: !B\n    bkw1: 2\n    bkw2: hello world\n\"\"\"", "config = yaml.load(txt)"], "simple_code": ["txt_default_alias , config  = 'a: !A.some_factory\\n  akw1: 8\\n  akw2: !B\\n    bkw1: 2\\n    bkw2: hello world\\n', yaml.load(txt)", ""], "lineno": [[[384, 4], [389, 3]], [[390, 4], [390, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_registrable.py", "cl": "", "me": "test_registrable_factory_roundtrip_alias", "idiom": "Assign Multi Targets", "compli_code": ["txt_default_alias = \"\"\"a: !a_class.some_factory\n  akw1: 8\n  akw2: !b_\n    bkw1: 2\n    bkw2: hello world\n\"\"\"", "config = yaml.load(txt)"], "simple_code": ["txt_default_alias , config  = 'a: !a_class.some_factory\\n  akw1: 8\\n  akw2: !b_\\n    bkw1: 2\\n    bkw2: hello world\\n', yaml.load(txt)", ""], "lineno": [[[405, 4], [410, 3]], [[411, 4], [411, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "make_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[15, 12], [15, 28]], [[16, 12], [16, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "make_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[21, 12], [21, 28]], [[22, 12], [22, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[15, 12], [15, 28]], [[16, 12], [16, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[21, 12], [21, 28]], [[22, 12], [22, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "make_classes_2", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[33, 12], [33, 28]], [[34, 12], [34, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "make_classes_2", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2", "self.bkw3 = bkw3"], "simple_code": ["self.bkw1 , self.bkw2 , self.bkw3  = bkw1, bkw2, bkw3", "", ""], "lineno": [[[39, 12], [39, 28]], [[40, 12], [40, 28]], [[41, 12], [41, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[33, 12], [33, 28]], [[34, 12], [34, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2", "self.bkw3 = bkw3"], "simple_code": ["self.bkw1 , self.bkw2 , self.bkw3  = bkw1, bkw2, bkw3", "", ""], "lineno": [[[39, 12], [39, 28]], [[40, 12], [40, 28]], [[41, 12], [41, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "test_component_dumping_with_defaults_and_comments", "idiom": "Assign Multi Targets", "compli_code": ["txt_expected = \"\"\"!A\nakw1: 8\nakw2: !B\n  bkw1: 1\n  bkw2: test\n  bkw3: 99\n\"\"\"", "a_schema = yaml.load(txt)"], "simple_code": ["txt_expected , a_schema  = '!A\\nakw1: 8\\nakw2: !B\\n  bkw1: 1\\n  bkw2: test\\n  bkw3: 99\\n', yaml.load(txt)", ""], "lineno": [[[138, 4], [144, 3]], [[145, 4], [145, 29]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "test_component_dumping_factory", "idiom": "Assign Multi Targets", "compli_code": ["a = make_instances()", "config = \"!A {}\\n\""], "simple_code": ["a , config  = make_instances(), '!A {}\\n'", ""], "lineno": [[[153, 4], [153, 24]], [[154, 4], [154, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "test_component_dumping_made_in_code", "idiom": "Assign Multi Targets", "compli_code": ["txt_expected = \"\"\"!A\nakw1: 8\nakw2: !B\n  bkw1: 1\n  bkw2: test\n  bkw3: 99\n\"\"\"", "b_custom = B.compile(bkw1=1, bkw2='test')"], "simple_code": ["txt_expected , b_custom  = '!A\\nakw1: 8\\nakw2: !B\\n  bkw1: 1\\n  bkw2: test\\n  bkw3: 99\\n', B.compile(bkw1=1, bkw2='test')", ""], "lineno": [[[163, 4], [169, 3]], [[170, 4], [170, 45]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/compile/test_compilable.py", "cl": "", "me": "test_component_anchors_compile_to_same_instance", "idiom": "Assign Multi Targets", "compli_code": ["a1.akw2.bkw1 = 6", "a2 = config[\"two\"]()"], "simple_code": ["a1.akw2.bkw1 , a2  = 6, config['two']()", ""], "lineno": [[[192, 4], [192, 20]], [[193, 4], [193, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/optim/test_scheduler.py", "cl": "", "me": "test_warmup_linear", "idiom": "Truth Value Test", "compli_code": ["scheduler.get_lr()[0] == 0"], "simple_code": ["not scheduler.get_lr()[0]"], "lineno": [[[14, 11], [14, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/optim/test_scheduler.py", "cl": "", "me": "test_warmup_linear", "idiom": "Truth Value Test", "compli_code": ["scheduler.get_lr()[0] == 0"], "simple_code": ["not scheduler.get_lr()[0]"], "lineno": [[[23, 11], [23, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/optim/test_scheduler.py", "cl": "", "me": "test_noam", "idiom": "Truth Value Test", "compli_code": ["scheduler.get_lr()[0] == 0"], "simple_code": ["not scheduler.get_lr()[0]"], "lineno": [[[31, 11], [31, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/sampler/test_base.py", "cl": "", "me": "test_compose_padded_batches_from_nested_seq", "idiom": "Assign Multi Targets", "compli_code": ["data = (\n        (\n            torch.tensor([7]),  # Not nested\n            [torch.tensor([1, 2]), torch.tensor([3, 4, 5, 6, 7])],  # Nested\n            [torch.tensor([1, 2]), torch.tensor([1, 2]), torch.tensor([3, 4, 5])]  # Nested\n        ),\n        (\n            torch.tensor([7, 8]),  # Not nested\n            [torch.tensor([7, 8]), torch.tensor([7, 8]), torch.tensor([7, 8]), torch.tensor([7, 8])],  # Nested\n            [torch.tensor([1, 2, 3, 4, 5, 6, 7, 8])]  # Nested\n        ),\n        (\n            torch.tensor([7, 8, 9]),  # Not nested\n            [torch.tensor([1, 2, 3]), torch.tensor([4, 5])],  # Nested\n            [torch.tensor([1, 2])]  # Nested\n        ),\n        (\n            torch.tensor([7, 8, 9, 10]),  # Not nested\n            [torch.tensor([1, 2, 3]), torch.tensor([4, 5, 6, 7, 8, 9])],  # Nested\n            [torch.tensor([1, 2, 4, 5, 6, 7, 8])]  # Nested\n        ),\n    )", "sampler = BaseSampler(\n        batch_size=bs,\n        shuffle=False,\n        pad_index=0\n    )"], "simple_code": ["data , sampler  = ((torch.tensor([7]), [torch.tensor([1, 2]), torch.tensor([3, 4, 5, 6, 7])], [torch.tensor([1, 2]), torch.tensor([1, 2]), torch.tensor([3, 4, 5])]), (torch.tensor([7, 8]), [torch.tensor([7, 8]), torch.tensor([7, 8]), torch.tensor([7, 8]), torch.tensor([7, 8])], [torch.tensor([1, 2, 3, 4, 5, 6, 7, 8])]), (torch.tensor([7, 8, 9]), [torch.tensor([1, 2, 3]), torch.tensor([4, 5])], [torch.tensor([1, 2])]), (torch.tensor([7, 8, 9, 10]), [torch.tensor([1, 2, 3]), torch.tensor([4, 5, 6, 7, 8, 9])], [torch.tensor([1, 2, 4, 5, 6, 7, 8])])), BaseSampler(batch_size=bs, shuffle=False, pad_index=0)", ""], "lineno": [[[20, 4], [41, 5]], [[42, 4], [46, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/sampler/test_base.py", "cl": "", "me": "test_column_specific_pad_indexes", "idiom": "Assign Multi Targets", "compli_code": ["data = (\n        (\n            torch.tensor(1 * [1]),\n            torch.tensor(1 * [2]),\n            torch.tensor(1 * [3])\n        ),\n        (\n            torch.tensor(4 * [1]),\n            torch.tensor(5 * [2]),\n            torch.tensor(6 * [3])\n        ),\n        (\n            torch.tensor(10 * [1]),\n            torch.tensor(10 * [2]),\n            torch.tensor(10 * [3])\n        )\n    )", "sampler = BaseSampler(\n        batch_size=bs,\n        shuffle=False,\n        pad_index=(-2, -1, 0)\n    )"], "simple_code": ["data , sampler  = ((torch.tensor(1 * [1]), torch.tensor(1 * [2]), torch.tensor(1 * [3])), (torch.tensor(4 * [1]), torch.tensor(5 * [2]), torch.tensor(6 * [3])), (torch.tensor(10 * [1]), torch.tensor(10 * [2]), torch.tensor(10 * [3]))), BaseSampler(batch_size=bs, shuffle=False, pad_index=(-2, -1, 0))", ""], "lineno": [[[71, 4], [87, 5]], [[88, 4], [92, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/sampler/test_base.py", "cl": "", "me": "test_incorrect_num_column_specific_pad_indexes_raises_error", "idiom": "Assign Multi Targets", "compli_code": ["bs = 3", "data = (\n        (\n            torch.tensor(1 * [1]),\n            torch.tensor(1 * [2]),\n            torch.tensor(1 * [3])\n        ),\n        (\n            torch.tensor(4 * [1]),\n            torch.tensor(5 * [2]),\n            torch.tensor(6 * [3])\n        ),\n        (\n            torch.tensor(10 * [1]),\n            torch.tensor(10 * [2]),\n            torch.tensor(10 * [3])\n        )\n    )"], "simple_code": ["bs , data  = 3, ((torch.tensor(1 * [1]), torch.tensor(1 * [2]), torch.tensor(1 * [3])), (torch.tensor(4 * [1]), torch.tensor(5 * [2]), torch.tensor(6 * [3])), (torch.tensor(10 * [1]), torch.tensor(10 * [2]), torch.tensor(10 * [3])))", ""], "lineno": [[[110, 4], [110, 10]], [[111, 4], [127, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "", "me": "make_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[12, 12], [12, 28]], [[13, 12], [13, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "", "me": "make_classes", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[17, 12], [17, 28]], [[18, 12], [18, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "A", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.akw1 = akw1", "self.akw2 = akw2"], "simple_code": ["self.akw1 , self.akw2  = akw1, akw2", ""], "lineno": [[[12, 12], [12, 28]], [[13, 12], [13, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "B", "me": "__init__", "idiom": "Assign Multi Targets", "compli_code": ["self.bkw1 = bkw1", "self.bkw2 = bkw2"], "simple_code": ["self.bkw1 , self.bkw2  = bkw1, bkw2", ""], "lineno": [[[17, 12], [17, 28]], [[18, 12], [18, 28]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "", "me": "test_divide_nested_grid_search_options_nested_schemas", "idiom": "Assign Multi Targets", "compli_code": ["config1 = yaml.load(txt_1)", "config2 = yaml.load(txt_2)", "divided_configs = list(divide_nested_grid_search_options(config))"], "simple_code": ["config1 , config2 , divided_configs  = yaml.load(txt_1), yaml.load(txt_2), list(divide_nested_grid_search_options(config))", "", ""], "lineno": [[[78, 4], [78, 30]], [[79, 4], [79, 30]], [[80, 4], [80, 69]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "", "me": "test_divide_nested_grid_search_options_nested_options", "idiom": "Assign Multi Targets", "compli_code": ["config1 = yaml.load(txt_1)", "config2 = yaml.load(txt_2)", "divided_configs = list(divide_nested_grid_search_options(config))"], "simple_code": ["config1 , config2 , divided_configs  = yaml.load(txt_1), yaml.load(txt_2), list(divide_nested_grid_search_options(config))", "", ""], "lineno": [[[112, 4], [112, 30]], [[113, 4], [113, 30]], [[114, 4], [114, 69]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "", "me": "test_default_devices_cpu", "idiom": "Assign Multi Targets", "compli_code": ["cuda_available.return_value = False", "ray_initialized.return_value = initialized", "cpu_count.return_value = 2", "gpu_count.return_value = 0", "resources.return_value = {'cpu': 2}", "devices = get_default_devices(debug=debug)"], "simple_code": ["cuda_available.return_value , ray_initialized.return_value , cpu_count.return_value , gpu_count.return_value , resources.return_value , devices  = False, initialized, 2, 0, {'cpu': 2}, get_default_devices(debug=debug)", "", "", "", "", ""], "lineno": [[[132, 4], [132, 39]], [[133, 4], [133, 46]], [[134, 4], [134, 30]], [[135, 4], [135, 30]], [[136, 4], [136, 39]], [[138, 4], [138, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/experiment/test_utils.py", "cl": "", "me": "test_default_devices_gpu", "idiom": "Assign Multi Targets", "compli_code": ["cuda_available.return_value = True", "ray_initialized.return_value = initialized", "cpu_count.return_value = 2", "gpu_count.return_value = 2", "resources.return_value = {'cpu': 2, 'gpu': 2}", "devices = get_default_devices(debug=debug)"], "simple_code": ["cuda_available.return_value , ray_initialized.return_value , cpu_count.return_value , gpu_count.return_value , resources.return_value , devices  = True, initialized, 2, 2, {'cpu': 2, 'gpu': 2}, get_default_devices(debug=debug)", "", "", "", "", ""], "lineno": [[[165, 4], [165, 38]], [[166, 4], [166, 46]], [[167, 4], [167, 30]], [[168, 4], [168, 30]], [[169, 4], [169, 49]], [[171, 4], [171, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nlp/classification/test_tc_datasets.py", "cl": "", "me": "test_dataset_trec", "idiom": "Truth Value Test", "compli_code": ["len(dataset.val) == 0"], "simple_code": ["not len(dataset.val)"], "lineno": [[[21, 11], [21, 32]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nlp/classification/test_tc_datasets.py", "cl": "", "me": "test_dataset_news", "idiom": "Truth Value Test", "compli_code": ["len(dataset.val) == 0"], "simple_code": ["not len(dataset.val)"], "lineno": [[[35, 15], [35, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_auc_full", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = np.random.randint(0, 10000, 100)", "y_true = np.random.randint(0, 2, 100)"], "simple_code": ["y_pred , y_true  = np.random.randint(0, 10000, 100), np.random.randint(0, 2, 100)", ""], "lineno": [[[20, 4], [20, 45]], [[21, 4], [21, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_auc_threshold", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = torch.tensor([0.1, 0.2, 0.3, 0.4])", "y_true = torch.tensor([0, 1, 0, 1])"], "simple_code": ["y_pred , y_true  = torch.tensor([0.1, 0.2, 0.3, 0.4]), torch.tensor([0, 1, 0, 1])", ""], "lineno": [[[39, 4], [39, 47]], [[40, 4], [40, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_auc_empty", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = torch.tensor([])", "y_true = torch.tensor([])", "auc = AUC()"], "simple_code": ["y_pred , y_true , auc  = torch.tensor([]), torch.tensor([]), AUC()", "", ""], "lineno": [[[49, 4], [49, 29]], [[50, 4], [50, 29]], [[52, 4], [52, 15]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_multiclass_auc_full_one_hot", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = np.random.uniform(0, 1, (100, n_classes))", "y_true = np.zeros((100, n_classes))"], "simple_code": ["y_pred , y_true  = np.random.uniform(0, 1, (100, n_classes)), np.zeros((100, n_classes))", ""], "lineno": [[[59, 4], [59, 54]], [[60, 4], [60, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_multiclass_auc_full_indexed", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = np.random.uniform(0, 1, (100, n_classes))", "y_true = np.random.randint(0, n_classes, 100)", "y_onehot = np.zeros((100, n_classes))"], "simple_code": ["y_pred , y_true , y_onehot  = np.random.uniform(0, 1, (100, n_classes)), np.random.randint(0, n_classes, 100), np.zeros((100, n_classes))", "", ""], "lineno": [[[69, 4], [69, 54]], [[70, 4], [70, 49]], [[72, 4], [72, 41]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_multiclass_auc_empty", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = torch.tensor([])", "y_true = torch.tensor([])", "auc = MultiClassAUC()"], "simple_code": ["y_pred , y_true , auc  = torch.tensor([]), torch.tensor([]), MultiClassAUC()", "", ""], "lineno": [[[80, 4], [80, 29]], [[81, 4], [81, 29]], [[83, 4], [83, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_aggregation_accuracy", "idiom": "Assign Multi Targets", "compli_code": ["metric_state = {}", "metric = Accuracy()"], "simple_code": ["metric_state , metric  = {}, Accuracy()", ""], "lineno": [[[168, 4], [168, 21]], [[169, 4], [169, 23]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_aggregation_auc", "idiom": "Assign Multi Targets", "compli_code": ["metric_state = {}", "metric = AUC()", "y_pred = torch.randint(0, 10000, [100])", "y_true = torch.randint(0, 2, [100])"], "simple_code": ["metric_state , metric , y_pred , y_true  = {}, AUC(), torch.randint(0, 10000, [100]), torch.randint(0, 2, [100])", "", "", ""], "lineno": [[[180, 4], [180, 21]], [[181, 4], [181, 18]], [[182, 4], [182, 43]], [[183, 4], [183, 39]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_aggregation_perplexity", "idiom": "Assign Multi Targets", "compli_code": ["metric_state = {}", "metric = Perplexity()", "y_pred = torch.randn(size=(100, 50))", "y_true = torch.randint(0, 50, (100, ))"], "simple_code": ["metric_state , metric , y_pred , y_true  = {}, Perplexity(), torch.randn(size=(100, 50)), torch.randint(0, 50, (100,))", "", "", ""], "lineno": [[[191, 4], [191, 21]], [[192, 4], [192, 25]], [[193, 4], [193, 40]], [[194, 4], [194, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_dev.py", "cl": "", "me": "test_global_aggregate", "idiom": "Assign Multi Targets", "compli_code": ["metric = metric_class()", "metric_state = {}"], "simple_code": ["metric , metric_state  = metric_class(), {}", ""], "lineno": [[[361, 8], [361, 31]], [[362, 8], [362, 25]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_loss.py", "cl": "", "me": "test_cross_entropy_one_hot", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = torch.tensor([[0.2, 0.8], [0.9, 0.1]])", "y_true = torch.tensor([[1, 0], [1, 0]])", "loss = MultiLabelCrossEntropy()"], "simple_code": ["y_pred , y_true , loss  = torch.tensor([[0.2, 0.8], [0.9, 0.1]]), torch.tensor([[1, 0], [1, 0]]), MultiLabelCrossEntropy()", "", ""], "lineno": [[[9, 4], [9, 51]], [[10, 4], [10, 43]], [[12, 4], [12, 35]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/metrics/test_loss.py", "cl": "", "me": "test_nllloss_one_hot", "idiom": "Assign Multi Targets", "compli_code": ["y_pred = torch.tensor([[0.2, 0.8], [0.9, 0.1]])", "y_true = torch.tensor([[1, 0], [1, 0]])", "loss = MultiLabelNLLLoss()"], "simple_code": ["y_pred , y_true , loss  = torch.tensor([[0.2, 0.8], [0.9, 0.1]]), torch.tensor([[1, 0], [1, 0]]), MultiLabelNLLLoss()", "", ""], "lineno": [[[18, 4], [18, 51]], [[19, 4], [19, 43]], [[21, 4], [21, 30]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_mlp.py", "cl": "", "me": "test_forward_pass_1_layer", "idiom": "Assign Multi Targets", "compli_code": ["input_size = 128", "output_size = 64"], "simple_code": ["input_size , output_size  = 128, 64", ""], "lineno": [[[6, 4], [6, 20]], [[7, 4], [7, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_mlp.py", "cl": "", "me": "test_forward_pass_1_layer", "idiom": "Assign Multi Targets", "compli_code": ["mlp_enc = MLPEncoder(input_size, output_size)", "_in = torch.rand((batch_size, input_size))"], "simple_code": ["mlp_enc , _in  = MLPEncoder(input_size, output_size), torch.rand((batch_size, input_size))", ""], "lineno": [[[11, 4], [11, 49]], [[12, 4], [12, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_mlp.py", "cl": "", "me": "test_forward_pass_1_layer", "idiom": "Assign Multi Targets", "compli_code": ["mlp_enc = MLPEncoder(\n        input_size,\n        output_size,\n        output_activation=torch.nn.ReLU(),\n    )", "_in = torch.rand((batch_size, input_size))"], "simple_code": ["mlp_enc , _in  = MLPEncoder(input_size, output_size, output_activation=torch.nn.ReLU()), torch.rand((batch_size, input_size))", ""], "lineno": [[[18, 4], [22, 5]], [[23, 4], [23, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_mlp.py", "cl": "", "me": "test_forward_pass_multi_layers", "idiom": "Assign Multi Targets", "compli_code": ["input_size = 256", "hidden_size = 128", "output_size = 64"], "simple_code": ["input_size , hidden_size , output_size  = 256, 128, 64", "", ""], "lineno": [[[30, 4], [30, 20]], [[31, 4], [31, 21]], [[32, 4], [32, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_mlp.py", "cl": "", "me": "test_forward_pass_multi_layers", "idiom": "Assign Multi Targets", "compli_code": ["mlp_enc = MLPEncoder(\n        input_size,\n        output_size,\n        n_layers=3,\n        hidden_size=hidden_size,\n    )", "_in = torch.rand((batch_size, input_size))"], "simple_code": ["mlp_enc , _in  = MLPEncoder(input_size, output_size, n_layers=3, hidden_size=hidden_size), torch.rand((batch_size, input_size))", ""], "lineno": [[[36, 4], [41, 5]], [[42, 4], [42, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_mlp.py", "cl": "", "me": "test_forward_pass_multi_layers", "idiom": "Assign Multi Targets", "compli_code": ["mlp_enc = MLPEncoder(\n        input_size,\n        output_size,\n        n_layers=3,\n        output_activation=torch.nn.ReLU(),\n        hidden_size=hidden_size,\n        hidden_activation=torch.nn.ReLU(),\n    )", "_in = torch.rand((batch_size, input_size))"], "simple_code": ["mlp_enc , _in  = MLPEncoder(input_size, output_size, n_layers=3, output_activation=torch.nn.ReLU(), hidden_size=hidden_size, hidden_activation=torch.nn.ReLU()), torch.rand((batch_size, input_size))", ""], "lineno": [[[48, 4], [55, 5]], [[56, 4], [56, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "test_last_pooling", "idiom": "Assign Multi Targets", "compli_code": ["_in = torch.rand(*size)", "p = pooling_cls()"], "simple_code": ["_in , p  = torch.rand(*size), pooling_cls()", ""], "lineno": [[[51, 4], [51, 27]], [[52, 4], [52, 21]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "test_structured_self_attentive_pooling_shapes", "idiom": "Assign Multi Targets", "compli_code": ["layer = StructuredSelfAttentivePooling(input_size=dim)", "input = torch.randn(100, 50, dim)"], "simple_code": ["layer , input  = StructuredSelfAttentivePooling(input_size=dim), torch.randn(100, 50, dim)", ""], "lineno": [[[135, 4], [135, 58]], [[136, 4], [136, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "test_structured_self_attentive_pooling_zeroes", "idiom": "Assign Multi Targets", "compli_code": ["layer = StructuredSelfAttentivePooling(input_size=dim)", "input = torch.zeros(100, 50, dim)"], "simple_code": ["layer , input  = StructuredSelfAttentivePooling(input_size=dim), torch.zeros(100, 50, dim)", ""], "lineno": [[[143, 4], [143, 58]], [[144, 4], [144, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "test_structured_self_attentive_pooling_ones", "idiom": "Assign Multi Targets", "compli_code": ["layer = StructuredSelfAttentivePooling(input_size=dim)", "input = torch.ones(100, 50, dim)"], "simple_code": ["layer , input  = StructuredSelfAttentivePooling(input_size=dim), torch.ones(100, 50, dim)", ""], "lineno": [[[152, 4], [152, 58]], [[153, 4], [153, 36]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "test_vector_based_generalized_pooling_shapes", "idiom": "Assign Multi Targets", "compli_code": ["layer = GeneralizedPooling(input_size=dim)", "input = torch.randn(100, 50, dim)"], "simple_code": ["layer , input  = GeneralizedPooling(input_size=dim), torch.randn(100, 50, dim)", ""], "lineno": [[[161, 4], [161, 46]], [[162, 4], [162, 37]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "build_tensor", "idiom": "Assign Multi Targets", "compli_code": ["batch_size = 2", "items = 4", "embedding_size = 3"], "simple_code": ["batch_size , items , embedding_size  = 2, 4, 3", "", ""], "lineno": [[[168, 4], [168, 18]], [[169, 4], [169, 13]], [[170, 4], [170, 22]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_pooling.py", "cl": "", "me": "build_tensor", "idiom": "Assign Multi Targets", "compli_code": ["data[0][0] = torch.tensor([1, 2, 3])", "data[0][1] = torch.tensor([4, 5, 6])", "data[0][2] = torch.tensor([1, 2, 3])", "data[0][3] = torch.tensor([4, 5, 6])"], "simple_code": ["data[0][0] , data[0][1] , data[0][2] , data[0][3]  = torch.tensor([1, 2, 3]), torch.tensor([4, 5, 6]), torch.tensor([1, 2, 3]), torch.tensor([4, 5, 6])", "", "", ""], "lineno": [[[172, 4], [172, 40]], [[173, 4], [173, 40]], [[174, 4], [174, 40]], [[175, 4], [175, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_kernel_sizes", "idiom": "Assign Multi Targets", "compli_code": ["kernels = [random.randint(5, 32) for _ in range(10)]", "cnn_enc = CNNEncoder(\n        input_channels=3,\n        channels=channels,\n        kernel_size=5,\n        conv_dim=3\n    )"], "simple_code": ["kernels , cnn_enc  = [random.randint(5, 32) for _ in range(10)], CNNEncoder(input_channels=3, channels=channels, kernel_size=5, conv_dim=3)", ""], "lineno": [[[61, 4], [61, 56]], [[63, 4], [68, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_kernel_sizes2", "idiom": "Assign Multi Targets", "compli_code": ["channels = [random.randint(5, 32) for _ in range(10)]", "kernels = [random.randint(5, 32) for _ in range(10)]"], "simple_code": ["channels , kernels  = [random.randint(5, 32) for _ in range(10)], [random.randint(5, 32) for _ in range(10)]", ""], "lineno": [[[75, 4], [75, 57]], [[76, 4], [76, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_kernel_sizes3", "idiom": "Assign Multi Targets", "compli_code": ["channels = [random.randint(5, 32) for _ in range(10)]", "kernels = [random.randint(5, 32) for _ in range(8)]"], "simple_code": ["channels , kernels  = [random.randint(5, 32) for _ in range(10)], [random.randint(5, 32) for _ in range(8)]", ""], "lineno": [[[90, 4], [90, 57]], [[91, 4], [91, 55]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_kernel_sizes4", "idiom": "Assign Multi Targets", "compli_code": ["channels = [10]", "kernels = [(10, 10)]"], "simple_code": ["channels , kernels  = [10], [(10, 10)]", ""], "lineno": [[[103, 4], [103, 19]], [[104, 4], [104, 24]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_kernel_sizes5", "idiom": "Assign Multi Targets", "compli_code": ["channels = [random.randint(5, 32) for _ in range(10)]", "kernels = [(random.randint(5, 32), random.randint(5, 32), random.randint(5, 32)) for _ in range(10)]"], "simple_code": ["channels , kernels  = [random.randint(5, 32) for _ in range(10)], [(random.randint(5, 32), random.randint(5, 32), random.randint(5, 32)) for _ in range(10)]", ""], "lineno": [[[126, 4], [126, 57]], [[127, 4], [127, 104]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_forward_passes", "idiom": "Assign Multi Targets", "compli_code": ["cnn_enc = CNNEncoder(\n        input_channels=3,\n        channels=channels,\n        kernel_size=3,\n        conv_dim=2,\n        pooling=torch.nn.MaxPool2d(2),\n        stride=1,\n        padding=1,\n    )", "_in = torch.rand((batch_size, 3, 32, 32))"], "simple_code": ["cnn_enc , _in  = CNNEncoder(input_channels=3, channels=channels, kernel_size=3, conv_dim=2, pooling=torch.nn.MaxPool2d(2), stride=1, padding=1), torch.rand((batch_size, 3, 32, 32))", ""], "lineno": [[[145, 4], [153, 5]], [[155, 4], [155, 45]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_forward_passes", "idiom": "Assign Multi Targets", "compli_code": ["cnn_enc = CNNEncoder(\n        input_channels=3,\n        channels=channels,\n        kernel_size=3,\n        conv_dim=2,\n        pooling=None,\n        stride=1,\n        padding=1,\n    )", "_in = torch.rand((batch_size, 3, 32, 32))"], "simple_code": ["cnn_enc , _in  = CNNEncoder(input_channels=3, channels=channels, kernel_size=3, conv_dim=2, pooling=None, stride=1, padding=1), torch.rand((batch_size, 3, 32, 32))", ""], "lineno": [[[160, 4], [168, 5]], [[170, 4], [170, 45]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_cnn.py", "cl": "", "me": "test_kernel_sizes", "idiom": "For Multi Targets", "compli_code": ["for i in cnn_enc.cnn:\n        conv = i[0]\n        assert conv.kernel_size == (5,5,5)"], "simple_code": ["for (i_0, *i_len) in cnn_enc.cnn:\n        conv = i_0\n        assert conv.kernel_size == (5, 5, 5)"], "lineno": [[[69, 4], [71, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_rnn.py", "cl": "", "me": "test_forward_pass", "idiom": "Assign Multi Targets", "compli_code": ["input_size = 300", "output_size = 10"], "simple_code": ["input_size , output_size  = 300, 10", ""], "lineno": [[[42, 4], [42, 20]], [[43, 4], [43, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_rnn.py", "cl": "", "me": "test_forward_pass", "idiom": "Assign Multi Targets", "compli_code": ["seq_len = 20", "batch_len = 32"], "simple_code": ["seq_len , batch_len  = 20, 32", ""], "lineno": [[[44, 4], [44, 16]], [[45, 4], [45, 18]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_rnn.py", "cl": "", "me": "test_forward_pass", "idiom": "Assign Multi Targets", "compli_code": ["rnn = RNNEncoder(\n        input_size=input_size,\n        hidden_size=output_size,\n        n_layers=4,\n        rnn_type=rnn_type)", "input_t = torch.rand(batch_len, seq_len, input_size)"], "simple_code": ["rnn , input_t  = RNNEncoder(input_size=input_size, hidden_size=output_size, n_layers=4, rnn_type=rnn_type), torch.rand(batch_len, seq_len, input_size)", ""], "lineno": [[[46, 4], [50, 26]], [[52, 4], [52, 56]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_rnn.py", "cl": "", "me": "test_transpose_on_forward_pass", "idiom": "Assign Multi Targets", "compli_code": ["input_size = 300", "output_size = 10"], "simple_code": ["input_size , output_size  = 300, 10", ""], "lineno": [[[60, 4], [60, 20]], [[61, 4], [61, 20]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/nn/test_rnn.py", "cl": "", "me": "test_transpose_on_forward_pass", "idiom": "Assign Multi Targets", "compli_code": ["rnn = RNNEncoder(\n        input_size=input_size,\n        hidden_size=output_size,\n        n_layers=4,\n        rnn_type=rnn_type)", "input_t = torch.rand(10, 10, input_size)"], "simple_code": ["rnn , input_t  = RNNEncoder(input_size=input_size, hidden_size=output_size, n_layers=4, rnn_type=rnn_type), torch.rand(10, 10, input_size)", ""], "lineno": [[[62, 4], [66, 26]], [[68, 4], [68, 44]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_incomplete_dataset", "idiom": "Truth Value Test", "compli_code": ["len(t.val) == 0"], "simple_code": ["not len(t.val)"], "lineno": [[[176, 11], [176, 26]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_incomplete_dataset", "idiom": "Truth Value Test", "compli_code": ["len(t.test) == 0"], "simple_code": ["not len(t.test)"], "lineno": [[[177, 11], [177, 27]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_cache_dataset", "idiom": "Truth Value Test", "compli_code": ["len(t.train.cached_data) == 0"], "simple_code": ["not len(t.train.cached_data)"], "lineno": [[[196, 11], [196, 40]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_valid_dataset", "idiom": "Assign Multi Targets", "compli_code": ["train = ((\"Lorem ipsum dolor sit amet\", 3, 4.5),\n             (\"Sed ut perspiciatis unde\", 5, 5.5))", "val = ((\"ipsum quia dolor sit\", 10, 3.5),)", "test = ((\"Ut enim ad minima veniam\", 100, 35),)"], "simple_code": ["train , val , test  = (('Lorem ipsum dolor sit amet', 3, 4.5), ('Sed ut perspiciatis unde', 5, 5.5)), (('ipsum quia dolor sit', 10, 3.5),), (('Ut enim ad minima veniam', 100, 35),)", "", ""], "lineno": [[[127, 4], [128, 50]], [[129, 4], [129, 46]], [[130, 4], [130, 51]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_invalid_dataset2", "idiom": "Assign Multi Targets", "compli_code": ["train = ((\"Lorem ipsum dolor sit amet\", 3, 4.5),\n             (\"Sed ut perspiciatis unde\", 4, 5.5))", "val = ((\"ipsum quia dolor sit\", 3.5),)"], "simple_code": ["train , val  = (('Lorem ipsum dolor sit amet', 3, 4.5), ('Sed ut perspiciatis unde', 4, 5.5)), (('ipsum quia dolor sit', 3.5),)", ""], "lineno": [[[163, 4], [164, 50]], [[165, 4], [165, 42]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_full_dataset_from_file", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"justo. Praesent luctus. Curabitur egestas nunc sed libero. Proin sed\"", "val_dummy = \"malesuada. Integer id magna et ipsum cursus vestibulum. Mauris magna.\""], "simple_code": ["train_dummy , val_dummy  = 'justo. Praesent luctus. Curabitur egestas nunc sed libero. Proin sed', 'malesuada. Integer id magna et ipsum cursus vestibulum. Mauris magna.'", ""], "lineno": [[[241, 4], [241, 88]], [[242, 4], [242, 87]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"eget, venenatis a, magna. Lorem ipsum dolor sit amet, consectetuer\"", "val_dummy = \"leo. Vivamus nibh dolor, nonummy ac, feugiat non, lobortis quis,\"", "test_dummy = \"turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'eget, venenatis a, magna. Lorem ipsum dolor sit amet, consectetuer', 'leo. Vivamus nibh dolor, nonummy ac, feugiat non, lobortis quis,', 'turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed'", "", ""], "lineno": [[[267, 4], [267, 86]], [[268, 4], [268, 82]], [[269, 4], [269, 95]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_with_test", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"Etiam ligula tortor, dictum eu, placerat eget, venenatis a, magna.\"", "val_dummy = \"turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed\"", "test_dummy = \"a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'Etiam ligula tortor, dictum eu, placerat eget, venenatis a, magna.', 'turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed', 'a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed'", "", ""], "lineno": [[[286, 4], [286, 86]], [[287, 4], [287, 94]], [[288, 4], [288, 85]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_ratios", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"leo. Vivamus nibh dolor, nonummy ac, feugiat non, lobortis quis,\"", "val_dummy = \"ac turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque\"", "test_dummy = \"turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'leo. Vivamus nibh dolor, nonummy ac, feugiat non, lobortis quis,', 'ac turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque', 'turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed'", "", ""], "lineno": [[[305, 4], [305, 84]], [[306, 4], [306, 93]], [[307, 4], [307, 95]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_ratios_with_test", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"leo. Vivamus nibh dolor, nonummy ac, feugiat non, lobortis quis,\"", "val_dummy = \"turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed\"", "test_dummy = \"a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'leo. Vivamus nibh dolor, nonummy ac, feugiat non, lobortis quis,', 'turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed', 'a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed'", "", ""], "lineno": [[[324, 4], [324, 84]], [[325, 4], [325, 94]], [[326, 4], [326, 85]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_dir_val_test", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"egestas blandit. Nam nulla magna, malesuada vel, convallis in, cursus\"", "val_dummy = \"turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed\"", "test_dummy = \"nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'egestas blandit. Nam nulla magna, malesuada vel, convallis in, cursus', 'turpis egestas. Aliquam fringilla cursus purus. Nullam scelerisque neque sed', 'nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis'", "", ""], "lineno": [[[343, 4], [343, 89]], [[344, 4], [344, 94]], [[345, 4], [345, 88]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_dir_with_test", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"Donec non justo. Proin non massa non ante bibendum ullamcorper.\"", "val_dummy = \"nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis\"", "test_dummy = \"a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'Donec non justo. Proin non massa non ante bibendum ullamcorper.', 'nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis', 'a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed'", "", ""], "lineno": [[[362, 4], [362, 83]], [[363, 4], [363, 87]], [[364, 4], [364, 85]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_dir_val_test_ratios", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"Aenean euismod mauris eu elit. Nulla facilisi. Sed neque. Sed\"", "val_dummy = \"ut quam vel sapien imperdiet ornare. In faucibus. Morbi vehicula.\"", "test_dummy = \"nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'Aenean euismod mauris eu elit. Nulla facilisi. Sed neque. Sed', 'ut quam vel sapien imperdiet ornare. In faucibus. Morbi vehicula.', 'nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis'", "", ""], "lineno": [[[383, 4], [383, 81]], [[384, 4], [384, 83]], [[385, 4], [385, 88]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_autogen_dir_val_test_ratios_with_test", "idiom": "Assign Multi Targets", "compli_code": ["train_dummy = \"Donec egestas. Aliquam nec enim. Nunc ut erat. Sed nunc\"", "val_dummy = \"nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis\"", "test_dummy = \"a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed\""], "simple_code": ["train_dummy , val_dummy , test_dummy  = 'Donec egestas. Aliquam nec enim. Nunc ut erat. Sed nunc', 'nibh. Aliquam ornare, libero at auctor ullamcorper, nisl arcu iaculis', 'a sollicitudin orci sem eget massa. Suspendisse eleifend. Cras sed'", "", ""], "lineno": [[[402, 4], [402, 75]], [[403, 4], [403, 87]], [[404, 4], [404, 85]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"text\": TextField(),\n        \"label\": LabelField()\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'text': TextField(), 'label': LabelField()}", ""], "lineno": [[[446, 4], [448, 53]], [[450, 4], [453, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_2", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"text\": {\n            \"field\": TextField()\n        },\n        \"label\": {\n            \"field\": LabelField(),\n            \"columns\": 1\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'text': {'field': TextField()}, 'label': {'field': LabelField(), 'columns': 1}}", ""], "lineno": [[[465, 4], [467, 53]], [[469, 4], [477, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_3", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"text\": {\n            \"columns\": 0\n        },\n        \"label\": {\n            \"field\": LabelField(),\n            \"columns\": 1\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'text': {'columns': 0}, 'label': {'field': LabelField(), 'columns': 1}}", ""], "lineno": [[[488, 4], [490, 53]], [[492, 4], [500, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_4", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"t1\": {\n            \"field\": TextField(),\n            \"columns\": 1\n        },\n        \"t2\": {\n            \"field\": TextField(),\n            \"columns\": 1\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'t1': {'field': TextField(), 'columns': 1}, 't2': {'field': TextField(), 'columns': 1}}", ""], "lineno": [[[507, 4], [509, 53]], [[511, 4], [520, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_5", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"t1\": {\n            \"field\": TextField(),\n            \"columns\": 0\n        },\n        \"t2\": {\n            \"field\": TextField(),\n            \"columns\": 0\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'t1': {'field': TextField(), 'columns': 0}, 't2': {'field': TextField(), 'columns': 0}}", ""], "lineno": [[[528, 4], [530, 53]], [[532, 4], [541, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_8", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"tx\": {\n            \"field\": LabelField(),\n            \"columns\": [0, 1]\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'tx': {'field': LabelField(), 'columns': [0, 1]}}", ""], "lineno": [[[602, 4], [604, 53]], [[606, 4], [611, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_with_named_cols", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"tx\": {\n            \"field\": LabelField(),\n            \"columns\": 'label'\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'tx': {'field': LabelField(), 'columns': 'label'}}", ""], "lineno": [[[619, 4], [621, 53]], [[623, 4], [628, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_with_invalid_named_cols", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"tx\": {\n            \"field\": LabelField(),\n            \"columns\": 'none_existent'\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'tx': {'field': LabelField(), 'columns': 'none_existent'}}", ""], "lineno": [[[635, 4], [637, 53]], [[639, 4], [644, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/unit/dataset/test_tabular.py", "cl": "", "me": "test_dataset_transform_with_mixed_cols", "idiom": "Assign Multi Targets", "compli_code": ["train = (\n            (\"Lorem ipsum dolor sit amet\", \"POSITIVE\"),\n            (\"Sed ut perspiciatis unde\", \"NEGATIVE\"))", "transform = {\n        \"label\": {\n            \"field\": LabelField(),\n            \"columns\": 1,\n        },\n        \"text\": {\n            \"field\": TextField(),\n            \"columns\": 'text',\n        }\n    }"], "simple_code": ["train , transform  = (('Lorem ipsum dolor sit amet', 'POSITIVE'), ('Sed ut perspiciatis unde', 'NEGATIVE')), {'label': {'field': LabelField(), 'columns': 1}, 'text': {'field': TextField(), 'columns': 'text'}}", ""], "lineno": [[[651, 4], [653, 53]], [[655, 4], [664, 5]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/integration/test_builder.py", "cl": "", "me": "test_exporter_builder", "idiom": "Truth Value Test", "compli_code": ["ret.returncode == 0"], "simple_code": ["not ret.returncode"], "lineno": [[[61, 15], [61, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/integration/test_builder.py", "cl": "", "me": "test_exporter_builder", "idiom": "Truth Value Test", "compli_code": ["ret.returncode == 0"], "simple_code": ["not ret.returncode"], "lineno": [[[86, 15], [86, 34]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/integration/test_examples.py", "cl": "", "me": "run_experiments", "idiom": "Truth Value Test", "compli_code": ["ret.returncode == 0"], "simple_code": ["not ret.returncode"], "lineno": [[[54, 27], [54, 46]]], "keyno": null}, {"file_path": "/home/gerardo/Scrivania/flambe/tests/integration/test_resources_experiment.py", "cl": "", "me": "test_resources_config", "idiom": "Truth Value Test", "compli_code": ["ret.returncode == 0"], "simple_code": ["not ret.returncode"], "lineno": [[[30, 15], [30, 34]]], "keyno": null}]